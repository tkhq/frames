{"version":3,"file":"bundle.4b2049c6821b481755d8.js","mappings":"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","sources":["webpack://export-tests/./node_modules/@hpke/common/esm/src/errors.js","webpack://export-tests/./node_modules/@hpke/common/esm/_dnt.shims.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/algorithm.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/identifiers.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/consts.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/interfaces/kemInterface.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/utils/misc.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/kems/dhkem.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/interfaces/dhkemPrimitives.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/utils/bignum.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/kems/dhkemPrimitives/ec.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/kdfs/hkdf.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/interfaces/aeadEncryptionContext.js","webpack://export-tests/./node_modules/@hpke/common/esm/src/curve/montgomery.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/aeads/aesGcm.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/aeads/exportOnly.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/utils/emitNotSupported.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/exporterContext.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/encryptionContext.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/recipientContext.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/senderContext.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/cipherSuiteNative.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/kems/dhkemNative.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/native.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x25519.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/kems/dhkemX25519.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/kems/dhkemPrimitives/x448.js","webpack://export-tests/./node_modules/@hpke/core/esm/src/kems/dhkemX448.js","webpack://export-tests/./node_modules/@noble/ed25519/index.js","webpack://export-tests/./node_modules/@noble/hashes/esm/utils.js","webpack://export-tests/./node_modules/@noble/hashes/esm/_md.js","webpack://export-tests/./node_modules/@noble/hashes/esm/_u64.js","webpack://export-tests/./node_modules/@noble/hashes/esm/sha2.js","webpack://export-tests/./node_modules/@noble/hashes/esm/sha512.js"],"sourcesContent":["/**\n * The base error class of hpke-js.\n * @group Errors\n */\nexport class HpkeError extends Error {\n    constructor(e) {\n        let message;\n        if (e instanceof Error) {\n            message = e.message;\n        }\n        else if (typeof e === \"string\") {\n            message = e;\n        }\n        else {\n            message = \"\";\n        }\n        super(message);\n        this.name = this.constructor.name;\n    }\n}\n/**\n * Invalid parameter.\n * @group Errors\n */\nexport class InvalidParamError extends HpkeError {\n}\n/**\n * KEM input or output validation failure.\n * @group Errors\n */\nexport class ValidationError extends HpkeError {\n}\n/**\n * Public or private key serialization failure.\n * @group Errors\n */\nexport class SerializeError extends HpkeError {\n}\n/**\n * Public or private key deserialization failure.\n * @group Errors\n */\nexport class DeserializeError extends HpkeError {\n}\n/**\n * encap() failure.\n * @group Errors\n */\nexport class EncapError extends HpkeError {\n}\n/**\n * decap() failure.\n * @group Errors\n */\nexport class DecapError extends HpkeError {\n}\n/**\n * Secret export failure.\n * @group Errors\n */\nexport class ExportError extends HpkeError {\n}\n/**\n * seal() failure.\n * @group Errors\n */\nexport class SealError extends HpkeError {\n}\n/**\n * open() failure.\n * @group Errors\n */\nexport class OpenError extends HpkeError {\n}\n/**\n * Sequence number overflow on the encryption context.\n * @group Errors\n */\nexport class MessageLimitReachedError extends HpkeError {\n}\n/**\n * Key pair derivation failure.\n * @group Errors\n */\nexport class DeriveKeyPairError extends HpkeError {\n}\n/**\n * Not supported failure.\n * @group Errors\n */\nexport class NotSupportedError extends HpkeError {\n}\n","const dntGlobals = {};\nexport const dntGlobalThis = createMergeProxy(globalThis, dntGlobals);\nfunction createMergeProxy(baseObj, extObj) {\n    return new Proxy(baseObj, {\n        get(_target, prop, _receiver) {\n            if (prop in extObj) {\n                return extObj[prop];\n            }\n            else {\n                return baseObj[prop];\n            }\n        },\n        set(_target, prop, value) {\n            if (prop in extObj) {\n                delete extObj[prop];\n            }\n            baseObj[prop] = value;\n            return true;\n        },\n        deleteProperty(_target, prop) {\n            let success = false;\n            if (prop in extObj) {\n                delete extObj[prop];\n                success = true;\n            }\n            if (prop in baseObj) {\n                delete baseObj[prop];\n                success = true;\n            }\n            return success;\n        },\n        ownKeys(_target) {\n            const baseKeys = Reflect.ownKeys(baseObj);\n            const extKeys = Reflect.ownKeys(extObj);\n            const extKeysSet = new Set(extKeys);\n            return [...baseKeys.filter((k) => !extKeysSet.has(k)), ...extKeys];\n        },\n        defineProperty(_target, prop, desc) {\n            if (prop in extObj) {\n                delete extObj[prop];\n            }\n            Reflect.defineProperty(baseObj, prop, desc);\n            return true;\n        },\n        getOwnPropertyDescriptor(_target, prop) {\n            if (prop in extObj) {\n                return Reflect.getOwnPropertyDescriptor(extObj, prop);\n            }\n            else {\n                return Reflect.getOwnPropertyDescriptor(baseObj, prop);\n            }\n        },\n        has(_target, prop) {\n            return prop in extObj || prop in baseObj;\n        },\n    });\n}\n","import * as dntShim from \"../_dnt.shims.js\";\nimport { NotSupportedError } from \"./errors.js\";\nasync function loadSubtleCrypto() {\n    if (dntShim.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {\n        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.\n        return globalThis.crypto.subtle;\n    }\n    // Node.js <= v18\n    try {\n        // @ts-ignore: to ignore \"crypto\"\n        const { webcrypto } = await import(\"crypto\"); // node:crypto\n        return webcrypto.subtle;\n    }\n    catch (e) {\n        throw new NotSupportedError(e);\n    }\n}\nexport class NativeAlgorithm {\n    constructor() {\n        Object.defineProperty(this, \"_api\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n    }\n    async _setup() {\n        if (this._api !== undefined) {\n            return;\n        }\n        this._api = await loadSubtleCrypto();\n    }\n}\n","/**\n * The supported HPKE modes.\n */\nexport const Mode = {\n    Base: 0x00,\n    Psk: 0x01,\n    Auth: 0x02,\n    AuthPsk: 0x03,\n};\n/**\n * The supported Key Encapsulation Mechanism (KEM) identifiers.\n */\nexport const KemId = {\n    NotAssigned: 0x0000,\n    DhkemP256HkdfSha256: 0x0010,\n    DhkemP384HkdfSha384: 0x0011,\n    DhkemP521HkdfSha512: 0x0012,\n    DhkemSecp256k1HkdfSha256: 0x0013,\n    DhkemX25519HkdfSha256: 0x0020,\n    DhkemX448HkdfSha512: 0x0021,\n    HybridkemX25519Kyber768: 0x0030,\n    MlKem512: 0x0040,\n    MlKem768: 0x0041,\n    MlKem1024: 0x0042,\n    XWing: 0x647a,\n};\n/**\n * The supported Key Derivation Function (KDF) identifiers.\n */\nexport const KdfId = {\n    HkdfSha256: 0x0001,\n    HkdfSha384: 0x0002,\n    HkdfSha512: 0x0003,\n};\n/**\n * The supported Authenticated Encryption with Associated Data (AEAD) identifiers.\n */\nexport const AeadId = {\n    Aes128Gcm: 0x0001,\n    Aes256Gcm: 0x0002,\n    Chacha20Poly1305: 0x0003,\n    ExportOnly: 0xFFFF,\n};\n","// The input length limit (psk, psk_id, info, exporter_context, ikm).\nexport const INPUT_LENGTH_LIMIT = 8192;\nexport const INFO_LENGTH_LIMIT = 65536;\n// The minimum length of a PSK.\nexport const MINIMUM_PSK_LENGTH = 32;\n// b\"\"\nexport const EMPTY = new Uint8Array(0);\n","// b\"KEM\"\nexport const SUITE_ID_HEADER_KEM = new Uint8Array([\n    75,\n    69,\n    77,\n    0,\n    0,\n]);\n","import * as dntShim from \"../../_dnt.shims.js\";\nimport { KemId } from \"../identifiers.js\";\nexport const isDenoV1 = () => \n// deno-lint-ignore no-explicit-any\ndntShim.dntGlobalThis.process === undefined;\n/**\n * Checks whether the runtime is Deno or not (Node.js).\n * @returns boolean - true if the runtime is Deno, false Node.js.\n */\nexport function isDeno() {\n    // deno-lint-ignore no-explicit-any\n    if (dntShim.dntGlobalThis.process === undefined) {\n        return true;\n    }\n    // deno-lint-ignore no-explicit-any\n    return dntShim.dntGlobalThis.process?.versions?.deno !== undefined;\n}\n/**\n * Checks whetehr the type of input is CryptoKeyPair or not.\n */\nexport const isCryptoKeyPair = (x) => typeof x === \"object\" &&\n    x !== null &&\n    typeof x.privateKey === \"object\" &&\n    typeof x.publicKey === \"object\";\n/**\n * Converts integer to octet string. I2OSP implementation.\n */\nexport function i2Osp(n, w) {\n    if (w <= 0) {\n        throw new Error(\"i2Osp: too small size\");\n    }\n    if (n >= 256 ** w) {\n        throw new Error(\"i2Osp: too large integer\");\n    }\n    const ret = new Uint8Array(w);\n    for (let i = 0; i < w && n; i++) {\n        ret[w - (i + 1)] = n % 256;\n        n = n >> 8;\n    }\n    return ret;\n}\n/**\n * Concatenates two Uint8Arrays.\n * @param a Uint8Array\n * @param b Uint8Array\n * @returns Concatenated Uint8Array\n */\nexport function concat(a, b) {\n    const ret = new Uint8Array(a.length + b.length);\n    ret.set(a, 0);\n    ret.set(b, a.length);\n    return ret;\n}\n/**\n * Decodes Base64Url-encoded data.\n * @param v Base64Url-encoded string\n * @returns Uint8Array\n */\nexport function base64UrlToBytes(v) {\n    const base64 = v.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    const byteString = atob(base64);\n    const ret = new Uint8Array(byteString.length);\n    for (let i = 0; i < byteString.length; i++) {\n        ret[i] = byteString.charCodeAt(i);\n    }\n    return ret;\n}\n/**\n * Encodes Uint8Array to Base64Url.\n * @param v Uint8Array\n * @returns Base64Url-encoded string\n */\nexport function bytesToBase64Url(v) {\n    return btoa(String.fromCharCode(...v))\n        .replace(/\\+/g, \"-\")\n        .replace(/\\//g, \"_\")\n        .replace(/=*$/g, \"\");\n}\n/**\n * Decodes hex string to Uint8Array.\n * @param v Hex string\n * @returns Uint8Array\n * @throws Error if the input is not a hex string.\n */\nexport function hexToBytes(v) {\n    if (v.length === 0) {\n        return new Uint8Array([]);\n    }\n    const res = v.match(/[\\da-f]{2}/gi);\n    if (res == null) {\n        throw new Error(\"Not hex string.\");\n    }\n    return new Uint8Array(res.map(function (h) {\n        return parseInt(h, 16);\n    }));\n}\n/**\n * Encodes Uint8Array to hex string.\n * @param v Uint8Array\n * @returns Hex string\n */\nexport function bytesToHex(v) {\n    return [...v].map((x) => x.toString(16).padStart(2, \"0\")).join(\"\");\n}\n/**\n * Converts KemId to KeyAlgorithm.\n * @param kem KemId\n * @returns KeyAlgorithm\n */\nexport function kemToKeyGenAlgorithm(kem) {\n    switch (kem) {\n        case KemId.DhkemP256HkdfSha256:\n            return {\n                name: \"ECDH\",\n                namedCurve: \"P-256\",\n            };\n        case KemId.DhkemP384HkdfSha384:\n            return {\n                name: \"ECDH\",\n                namedCurve: \"P-384\",\n            };\n        case KemId.DhkemP521HkdfSha512:\n            return {\n                name: \"ECDH\",\n                namedCurve: \"P-521\",\n            };\n        default:\n            // case KemId.DhkemX25519HkdfSha256\n            return {\n                name: \"X25519\",\n            };\n    }\n}\nexport async function loadSubtleCrypto() {\n    if (dntShim.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {\n        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.\n        return globalThis.crypto.subtle;\n    }\n    // Node.js <= v18\n    try {\n        // @ts-ignore: to ignore \"crypto\"\n        const { webcrypto } = await import(\"crypto\"); // node:crypto\n        return webcrypto.subtle;\n    }\n    catch (_e) {\n        throw new Error(\"Failed to load SubtleCrypto\");\n    }\n}\nexport async function loadCrypto() {\n    if (dntShim.dntGlobalThis !== undefined && globalThis.crypto !== undefined) {\n        // Browsers, Node.js >= v19, Cloudflare Workers, Bun, etc.\n        return globalThis.crypto;\n    }\n    // Node.js <= v18\n    try {\n        // @ts-ignore: to ignore \"crypto\"\n        const { webcrypto } = await import(\"crypto\"); // node:crypto\n        return webcrypto;\n    }\n    catch (_e) {\n        throw new Error(\"Web Cryptograph API not supported\");\n    }\n}\n/**\n * XOR for Uint8Array.\n */\nexport function xor(a, b) {\n    if (a.byteLength !== b.byteLength) {\n        throw new Error(\"xor: different length inputs\");\n    }\n    const buf = new Uint8Array(a.byteLength);\n    for (let i = 0; i < a.byteLength; i++) {\n        buf[i] = a[i] ^ b[i];\n    }\n    return buf;\n}\n","import { EMPTY, INPUT_LENGTH_LIMIT } from \"../consts.js\";\nimport { DecapError, EncapError, InvalidParamError } from \"../errors.js\";\nimport { SUITE_ID_HEADER_KEM } from \"../interfaces/kemInterface.js\";\nimport { concat, i2Osp, isCryptoKeyPair } from \"../utils/misc.js\";\n// b\"eae_prk\"\nconst LABEL_EAE_PRK = new Uint8Array([101, 97, 101, 95, 112, 114, 107]);\n// b\"shared_secret\"\n// deno-fmt-ignore\nconst LABEL_SHARED_SECRET = new Uint8Array([\n    115, 104, 97, 114, 101, 100, 95, 115, 101, 99,\n    114, 101, 116,\n]);\nfunction concat3(a, b, c) {\n    const ret = new Uint8Array(a.length + b.length + c.length);\n    ret.set(a, 0);\n    ret.set(b, a.length);\n    ret.set(c, a.length + b.length);\n    return ret;\n}\nexport class Dhkem {\n    constructor(id, prim, kdf) {\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"_prim\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_kdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.id = id;\n        this._prim = prim;\n        this._kdf = kdf;\n        const suiteId = new Uint8Array(SUITE_ID_HEADER_KEM);\n        suiteId.set(i2Osp(this.id, 2), 3);\n        this._kdf.init(suiteId);\n    }\n    async serializePublicKey(key) {\n        return await this._prim.serializePublicKey(key);\n    }\n    async deserializePublicKey(key) {\n        return await this._prim.deserializePublicKey(key);\n    }\n    async serializePrivateKey(key) {\n        return await this._prim.serializePrivateKey(key);\n    }\n    async deserializePrivateKey(key) {\n        return await this._prim.deserializePrivateKey(key);\n    }\n    async importKey(format, key, isPublic = true) {\n        return await this._prim.importKey(format, key, isPublic);\n    }\n    async generateKeyPair() {\n        return await this._prim.generateKeyPair();\n    }\n    async deriveKeyPair(ikm) {\n        if (ikm.byteLength > INPUT_LENGTH_LIMIT) {\n            throw new InvalidParamError(\"Too long ikm\");\n        }\n        return await this._prim.deriveKeyPair(ikm);\n    }\n    async encap(params) {\n        let ke;\n        if (params.ekm === undefined) {\n            ke = await this.generateKeyPair();\n        }\n        else if (isCryptoKeyPair(params.ekm)) {\n            // params.ekm is only used for testing.\n            ke = params.ekm;\n        }\n        else {\n            // params.ekm is only used for testing.\n            ke = await this.deriveKeyPair(params.ekm);\n        }\n        const enc = await this._prim.serializePublicKey(ke.publicKey);\n        const pkrm = await this._prim.serializePublicKey(params.recipientPublicKey);\n        try {\n            let dh;\n            if (params.senderKey === undefined) {\n                dh = new Uint8Array(await this._prim.dh(ke.privateKey, params.recipientPublicKey));\n            }\n            else {\n                const sks = isCryptoKeyPair(params.senderKey)\n                    ? params.senderKey.privateKey\n                    : params.senderKey;\n                const dh1 = new Uint8Array(await this._prim.dh(ke.privateKey, params.recipientPublicKey));\n                const dh2 = new Uint8Array(await this._prim.dh(sks, params.recipientPublicKey));\n                dh = concat(dh1, dh2);\n            }\n            let kemContext;\n            if (params.senderKey === undefined) {\n                kemContext = concat(new Uint8Array(enc), new Uint8Array(pkrm));\n            }\n            else {\n                const pks = isCryptoKeyPair(params.senderKey)\n                    ? params.senderKey.publicKey\n                    : await this._prim.derivePublicKey(params.senderKey);\n                const pksm = await this._prim.serializePublicKey(pks);\n                kemContext = concat3(new Uint8Array(enc), new Uint8Array(pkrm), new Uint8Array(pksm));\n            }\n            const sharedSecret = await this._generateSharedSecret(dh, kemContext);\n            return {\n                enc: enc,\n                sharedSecret: sharedSecret,\n            };\n        }\n        catch (e) {\n            throw new EncapError(e);\n        }\n    }\n    async decap(params) {\n        const pke = await this._prim.deserializePublicKey(params.enc);\n        const skr = isCryptoKeyPair(params.recipientKey)\n            ? params.recipientKey.privateKey\n            : params.recipientKey;\n        const pkr = isCryptoKeyPair(params.recipientKey)\n            ? params.recipientKey.publicKey\n            : await this._prim.derivePublicKey(params.recipientKey);\n        const pkrm = await this._prim.serializePublicKey(pkr);\n        try {\n            let dh;\n            if (params.senderPublicKey === undefined) {\n                dh = new Uint8Array(await this._prim.dh(skr, pke));\n            }\n            else {\n                const dh1 = new Uint8Array(await this._prim.dh(skr, pke));\n                const dh2 = new Uint8Array(await this._prim.dh(skr, params.senderPublicKey));\n                dh = concat(dh1, dh2);\n            }\n            let kemContext;\n            if (params.senderPublicKey === undefined) {\n                kemContext = concat(new Uint8Array(params.enc), new Uint8Array(pkrm));\n            }\n            else {\n                const pksm = await this._prim.serializePublicKey(params.senderPublicKey);\n                kemContext = new Uint8Array(params.enc.byteLength + pkrm.byteLength + pksm.byteLength);\n                kemContext.set(new Uint8Array(params.enc), 0);\n                kemContext.set(new Uint8Array(pkrm), params.enc.byteLength);\n                kemContext.set(new Uint8Array(pksm), params.enc.byteLength + pkrm.byteLength);\n            }\n            return await this._generateSharedSecret(dh, kemContext);\n        }\n        catch (e) {\n            throw new DecapError(e);\n        }\n    }\n    async _generateSharedSecret(dh, kemContext) {\n        const labeledIkm = this._kdf.buildLabeledIkm(LABEL_EAE_PRK, dh);\n        const labeledInfo = this._kdf.buildLabeledInfo(LABEL_SHARED_SECRET, kemContext, this.secretSize);\n        return await this._kdf.extractAndExpand(EMPTY.buffer, labeledIkm.buffer, labeledInfo.buffer, this.secretSize);\n    }\n}\n","// The key usages for KEM.\nexport const KEM_USAGES = [\"deriveBits\"];\n// b\"dkp_prk\"\nexport const LABEL_DKP_PRK = new Uint8Array([\n    100,\n    107,\n    112,\n    95,\n    112,\n    114,\n    107,\n]);\n// b\"sk\"\nexport const LABEL_SK = new Uint8Array([115, 107]);\n","/**\n * The minimum inplementation of bignum to derive an EC key pair.\n */\nexport class Bignum {\n    constructor(size) {\n        Object.defineProperty(this, \"_num\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._num = new Uint8Array(size);\n    }\n    val() {\n        return this._num;\n    }\n    reset() {\n        this._num.fill(0);\n    }\n    set(src) {\n        if (src.length !== this._num.length) {\n            throw new Error(\"Bignum.set: invalid argument\");\n        }\n        this._num.set(src);\n    }\n    isZero() {\n        for (let i = 0; i < this._num.length; i++) {\n            if (this._num[i] !== 0) {\n                return false;\n            }\n        }\n        return true;\n    }\n    lessThan(v) {\n        if (v.length !== this._num.length) {\n            throw new Error(\"Bignum.lessThan: invalid argument\");\n        }\n        for (let i = 0; i < this._num.length; i++) {\n            if (this._num[i] < v[i]) {\n                return true;\n            }\n            if (this._num[i] > v[i]) {\n                return false;\n            }\n        }\n        return false;\n    }\n}\n","import { NativeAlgorithm } from \"../../algorithm.js\";\nimport { EMPTY } from \"../../consts.js\";\nimport { DeriveKeyPairError, DeserializeError, NotSupportedError, SerializeError, } from \"../../errors.js\";\nimport { KemId } from \"../../identifiers.js\";\nimport { KEM_USAGES, LABEL_DKP_PRK } from \"../../interfaces/dhkemPrimitives.js\";\nimport { Bignum } from \"../../utils/bignum.js\";\nimport { base64UrlToBytes, i2Osp } from \"../../utils/misc.js\";\n// b\"candidate\"\n// deno-fmt-ignore\nconst LABEL_CANDIDATE = new Uint8Array([\n    99, 97, 110, 100, 105, 100, 97, 116, 101,\n]);\n// the order of the curve being used.\n// deno-fmt-ignore\nconst ORDER_P_256 = new Uint8Array([\n    0xff, 0xff, 0xff, 0xff, 0x00, 0x00, 0x00, 0x00,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xbc, 0xe6, 0xfa, 0xad, 0xa7, 0x17, 0x9e, 0x84,\n    0xf3, 0xb9, 0xca, 0xc2, 0xfc, 0x63, 0x25, 0x51,\n]);\n// deno-fmt-ignore\nconst ORDER_P_384 = new Uint8Array([\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xc7, 0x63, 0x4d, 0x81, 0xf4, 0x37, 0x2d, 0xdf,\n    0x58, 0x1a, 0x0d, 0xb2, 0x48, 0xb0, 0xa7, 0x7a,\n    0xec, 0xec, 0x19, 0x6a, 0xcc, 0xc5, 0x29, 0x73,\n]);\n// deno-fmt-ignore\nconst ORDER_P_521 = new Uint8Array([\n    0x01, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff,\n    0xff, 0xfa, 0x51, 0x86, 0x87, 0x83, 0xbf, 0x2f,\n    0x96, 0x6b, 0x7f, 0xcc, 0x01, 0x48, 0xf7, 0x09,\n    0xa5, 0xd0, 0x3b, 0xb5, 0xc9, 0xb8, 0x89, 0x9c,\n    0x47, 0xae, 0xbb, 0x6f, 0xb7, 0x1e, 0x91, 0x38,\n    0x64, 0x09,\n]);\n// deno-fmt-ignore\nconst PKCS8_ALG_ID_P_256 = new Uint8Array([\n    48, 65, 2, 1, 0, 48, 19, 6, 7, 42,\n    134, 72, 206, 61, 2, 1, 6, 8, 42, 134,\n    72, 206, 61, 3, 1, 7, 4, 39, 48, 37,\n    2, 1, 1, 4, 32,\n]);\n// deno-fmt-ignore\nconst PKCS8_ALG_ID_P_384 = new Uint8Array([\n    48, 78, 2, 1, 0, 48, 16, 6, 7, 42,\n    134, 72, 206, 61, 2, 1, 6, 5, 43, 129,\n    4, 0, 34, 4, 55, 48, 53, 2, 1, 1,\n    4, 48,\n]);\n// deno-fmt-ignore\nconst PKCS8_ALG_ID_P_521 = new Uint8Array([\n    48, 96, 2, 1, 0, 48, 16, 6, 7, 42,\n    134, 72, 206, 61, 2, 1, 6, 5, 43, 129,\n    4, 0, 35, 4, 73, 48, 71, 2, 1, 1,\n    4, 66,\n]);\nexport class Ec extends NativeAlgorithm {\n    constructor(kem, hkdf) {\n        super();\n        Object.defineProperty(this, \"_hkdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_alg\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nPk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nSk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nDh\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // EC specific arguments for deriving key pair.\n        Object.defineProperty(this, \"_order\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_bitmask\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pkcs8AlgId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._hkdf = hkdf;\n        switch (kem) {\n            case KemId.DhkemP256HkdfSha256:\n                this._alg = { name: \"ECDH\", namedCurve: \"P-256\" };\n                this._nPk = 65;\n                this._nSk = 32;\n                this._nDh = 32;\n                this._order = ORDER_P_256;\n                this._bitmask = 0xFF;\n                this._pkcs8AlgId = PKCS8_ALG_ID_P_256;\n                break;\n            case KemId.DhkemP384HkdfSha384:\n                this._alg = { name: \"ECDH\", namedCurve: \"P-384\" };\n                this._nPk = 97;\n                this._nSk = 48;\n                this._nDh = 48;\n                this._order = ORDER_P_384;\n                this._bitmask = 0xFF;\n                this._pkcs8AlgId = PKCS8_ALG_ID_P_384;\n                break;\n            default:\n                // case KemId.DhkemP521HkdfSha512:\n                this._alg = { name: \"ECDH\", namedCurve: \"P-521\" };\n                this._nPk = 133;\n                this._nSk = 66;\n                this._nDh = 66;\n                this._order = ORDER_P_521;\n                this._bitmask = 0x01;\n                this._pkcs8AlgId = PKCS8_ALG_ID_P_521;\n                break;\n        }\n    }\n    async serializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._api.exportKey(\"raw\", key);\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, true);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async serializePrivateKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            if (!(\"d\" in jwk)) {\n                throw new Error(\"Not private key\");\n            }\n            return base64UrlToBytes(jwk[\"d\"]).buffer;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePrivateKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, false);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async importKey(format, key, isPublic) {\n        await this._setup();\n        try {\n            if (format === \"raw\") {\n                return await this._importRawKey(key, isPublic);\n            }\n            // jwk\n            if (key instanceof ArrayBuffer) {\n                throw new Error(\"Invalid jwk key format\");\n            }\n            return await this._importJWK(key, isPublic);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async generateKeyPair() {\n        await this._setup();\n        try {\n            return await this._api.generateKey(this._alg, true, KEM_USAGES);\n        }\n        catch (e) {\n            throw new NotSupportedError(e);\n        }\n    }\n    async deriveKeyPair(ikm) {\n        await this._setup();\n        try {\n            const dkpPrk = await this._hkdf.labeledExtract(EMPTY.buffer, LABEL_DKP_PRK, new Uint8Array(ikm));\n            const bn = new Bignum(this._nSk);\n            for (let counter = 0; bn.isZero() || !bn.lessThan(this._order); counter++) {\n                if (counter > 255) {\n                    throw new Error(\"Faild to derive a key pair\");\n                }\n                const bytes = new Uint8Array(await this._hkdf.labeledExpand(dkpPrk, LABEL_CANDIDATE, i2Osp(counter, 1), this._nSk));\n                bytes[0] = bytes[0] & this._bitmask;\n                bn.set(bytes);\n            }\n            const sk = await this._deserializePkcs8Key(bn.val());\n            bn.reset();\n            return {\n                privateKey: sk,\n                publicKey: await this.derivePublicKey(sk),\n            };\n        }\n        catch (e) {\n            throw new DeriveKeyPairError(e);\n        }\n    }\n    async derivePublicKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            delete jwk[\"d\"];\n            delete jwk[\"key_ops\"];\n            return await this._api.importKey(\"jwk\", jwk, this._alg, true, []);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async dh(sk, pk) {\n        try {\n            await this._setup();\n            const bits = await this._api.deriveBits({\n                name: \"ECDH\",\n                public: pk,\n            }, sk, this._nDh * 8);\n            return bits;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async _importRawKey(key, isPublic) {\n        if (isPublic && key.byteLength !== this._nPk) {\n            throw new Error(\"Invalid public key for the ciphersuite\");\n        }\n        if (!isPublic && key.byteLength !== this._nSk) {\n            throw new Error(\"Invalid private key for the ciphersuite\");\n        }\n        if (isPublic) {\n            return await this._api.importKey(\"raw\", key, this._alg, true, []);\n        }\n        return await this._deserializePkcs8Key(new Uint8Array(key));\n    }\n    async _importJWK(key, isPublic) {\n        if (typeof key.crv === \"undefined\" || key.crv !== this._alg.namedCurve) {\n            throw new Error(`Invalid crv: ${key.crv}`);\n        }\n        if (isPublic) {\n            if (typeof key.d !== \"undefined\") {\n                throw new Error(\"Invalid key: `d` should not be set\");\n            }\n            return await this._api.importKey(\"jwk\", key, this._alg, true, []);\n        }\n        if (typeof key.d === \"undefined\") {\n            throw new Error(\"Invalid key: `d` not found\");\n        }\n        return await this._api.importKey(\"jwk\", key, this._alg, true, KEM_USAGES);\n    }\n    async _deserializePkcs8Key(k) {\n        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);\n        pkcs8Key.set(this._pkcs8AlgId, 0);\n        pkcs8Key.set(k, this._pkcs8AlgId.length);\n        return await this._api.importKey(\"pkcs8\", pkcs8Key, this._alg, true, KEM_USAGES);\n    }\n}\n","import { EMPTY } from \"../consts.js\";\nimport { InvalidParamError } from \"../errors.js\";\nimport { KdfId } from \"../identifiers.js\";\nimport { NativeAlgorithm } from \"../algorithm.js\";\n// b\"HPKE-v1\"\nconst HPKE_VERSION = new Uint8Array([72, 80, 75, 69, 45, 118, 49]);\nexport class HkdfNative extends NativeAlgorithm {\n    constructor() {\n        super();\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KdfId.HkdfSha256\n        });\n        Object.defineProperty(this, \"hashSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"_suiteId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: EMPTY\n        });\n        Object.defineProperty(this, \"algHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                name: \"HMAC\",\n                hash: \"SHA-256\",\n                length: 256,\n            }\n        });\n    }\n    init(suiteId) {\n        this._suiteId = suiteId;\n    }\n    buildLabeledIkm(label, ikm) {\n        this._checkInit();\n        const ret = new Uint8Array(7 + this._suiteId.byteLength + label.byteLength + ikm.byteLength);\n        ret.set(HPKE_VERSION, 0);\n        ret.set(this._suiteId, 7);\n        ret.set(label, 7 + this._suiteId.byteLength);\n        ret.set(ikm, 7 + this._suiteId.byteLength + label.byteLength);\n        return ret;\n    }\n    buildLabeledInfo(label, info, len) {\n        this._checkInit();\n        const ret = new Uint8Array(9 + this._suiteId.byteLength + label.byteLength + info.byteLength);\n        ret.set(new Uint8Array([0, len]), 0);\n        ret.set(HPKE_VERSION, 2);\n        ret.set(this._suiteId, 9);\n        ret.set(label, 9 + this._suiteId.byteLength);\n        ret.set(info, 9 + this._suiteId.byteLength + label.byteLength);\n        return ret;\n    }\n    async extract(salt, ikm) {\n        await this._setup();\n        if (salt.byteLength === 0) {\n            salt = new ArrayBuffer(this.hashSize);\n        }\n        if (salt.byteLength !== this.hashSize) {\n            throw new InvalidParamError(\"The salt length must be the same as the hashSize\");\n        }\n        const key = await this._api.importKey(\"raw\", salt, this.algHash, false, [\n            \"sign\",\n        ]);\n        return await this._api.sign(\"HMAC\", key, ikm);\n    }\n    async expand(prk, info, len) {\n        await this._setup();\n        const key = await this._api.importKey(\"raw\", prk, this.algHash, false, [\n            \"sign\",\n        ]);\n        const okm = new ArrayBuffer(len);\n        const p = new Uint8Array(okm);\n        let prev = EMPTY;\n        const mid = new Uint8Array(info);\n        const tail = new Uint8Array(1);\n        if (len > 255 * this.hashSize) {\n            throw new Error(\"Entropy limit reached\");\n        }\n        const tmp = new Uint8Array(this.hashSize + mid.length + 1);\n        for (let i = 1, cur = 0; cur < p.length; i++) {\n            tail[0] = i;\n            tmp.set(prev, 0);\n            tmp.set(mid, prev.length);\n            tmp.set(tail, prev.length + mid.length);\n            prev = new Uint8Array(await this._api.sign(\"HMAC\", key, tmp.slice(0, prev.length + mid.length + 1)));\n            if (p.length - cur >= prev.length) {\n                p.set(prev, cur);\n                cur += prev.length;\n            }\n            else {\n                p.set(prev.slice(0, p.length - cur), cur);\n                cur += p.length - cur;\n            }\n        }\n        return okm;\n    }\n    async extractAndExpand(salt, ikm, info, len) {\n        await this._setup();\n        const baseKey = await this._api.importKey(\"raw\", ikm, \"HKDF\", false, [\"deriveBits\"]);\n        return await this._api.deriveBits({\n            name: \"HKDF\",\n            hash: this.algHash.hash,\n            salt: salt,\n            info: info,\n        }, baseKey, len * 8);\n    }\n    async labeledExtract(salt, label, ikm) {\n        return await this.extract(salt, this.buildLabeledIkm(label, ikm).buffer);\n    }\n    async labeledExpand(prk, label, info, len) {\n        return await this.expand(prk, this.buildLabeledInfo(label, info, len).buffer, len);\n    }\n    _checkInit() {\n        if (this._suiteId === EMPTY) {\n            throw new Error(\"Not initialized. Call init()\");\n        }\n    }\n}\nexport class HkdfSha256Native extends HkdfNative {\n    constructor() {\n        super(...arguments);\n        /** KdfId.HkdfSha256 (0x0001) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KdfId.HkdfSha256\n        });\n        /** 32 */\n        Object.defineProperty(this, \"hashSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        /** The parameters for Web Cryptography API */\n        Object.defineProperty(this, \"algHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                name: \"HMAC\",\n                hash: \"SHA-256\",\n                length: 256,\n            }\n        });\n    }\n}\nexport class HkdfSha384Native extends HkdfNative {\n    constructor() {\n        super(...arguments);\n        /** KdfId.HkdfSha384 (0x0002) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KdfId.HkdfSha384\n        });\n        /** 48 */\n        Object.defineProperty(this, \"hashSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 48\n        });\n        /** The parameters for Web Cryptography API */\n        Object.defineProperty(this, \"algHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                name: \"HMAC\",\n                hash: \"SHA-384\",\n                length: 384,\n            }\n        });\n    }\n}\nexport class HkdfSha512Native extends HkdfNative {\n    constructor() {\n        super(...arguments);\n        /** KdfId.HkdfSha512 (0x0003) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KdfId.HkdfSha512\n        });\n        /** 64 */\n        Object.defineProperty(this, \"hashSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 64\n        });\n        /** The parameters for Web Cryptography API */\n        Object.defineProperty(this, \"algHash\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: {\n                name: \"HMAC\",\n                hash: \"SHA-512\",\n                length: 512,\n            }\n        });\n    }\n}\n","// The key usages for AEAD.\nexport const AEAD_USAGES = [\"encrypt\", \"decrypt\"];\n","/**\n * This file is based on noble-curves (https://github.com/paulmillr/noble-curves).\n *\n * noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com)\n *\n * The original file is located at:\n * https://github.com/paulmillr/noble-curves/blob/b9d49d2b41d550571a0c5be443ecb62109fa3373/src/abstract/montgomery.ts\n */\n/**\n * Montgomery curve methods. It's not really whole montgomery curve,\n * just bunch of very specific methods for X25519 / X448 from\n * [RFC 7748](https://www.rfc-editor.org/rfc/rfc7748)\n * @module\n */\n/*! noble-curves - MIT License (c) 2022 Paul Miller (paulmillr.com) */\nimport { abytes, aInRange, bytesToNumberLE, copyBytes, numberToBytesLE, randomBytesAsync, validateObject, } from \"../utils/noble.js\";\nimport { createKeygen } from \"./curve.js\";\nimport { mod } from \"./modular.js\";\nconst _0n = BigInt(0);\nconst _1n = BigInt(1);\nconst _2n = BigInt(2);\nfunction validateOpts(curve) {\n    validateObject(curve, {\n        adjustScalarBytes: \"function\",\n        powPminus2: \"function\",\n    });\n    return Object.freeze({ ...curve });\n}\nexport function montgomery(curveDef) {\n    const CURVE = validateOpts(curveDef);\n    const { P, type, adjustScalarBytes, powPminus2, randomBytes: rand } = CURVE;\n    const is25519 = type === \"x25519\";\n    if (!is25519 && type !== \"x448\")\n        throw new Error(\"invalid type\");\n    const randomBytes_ = rand || randomBytesAsync;\n    const montgomeryBits = is25519 ? 255 : 448;\n    const fieldLen = is25519 ? 32 : 56;\n    const Gu = is25519 ? BigInt(9) : BigInt(5);\n    // RFC 7748 #5:\n    // The constant a24 is (486662 - 2) / 4 = 121665 for curve25519/X25519 and\n    // (156326 - 2) / 4 = 39081 for curve448/X448\n    // const a = is25519 ? 156326n : 486662n;\n    const a24 = is25519 ? BigInt(121665) : BigInt(39081);\n    // RFC: x25519 \"the resulting integer is of the form 2^254 plus\n    // eight times a value between 0 and 2^251 - 1 (inclusive)\"\n    // x448: \"2^447 plus four times a value between 0 and 2^445 - 1 (inclusive)\"\n    const minScalar = is25519 ? _2n ** BigInt(254) : _2n ** BigInt(447);\n    const maxAdded = is25519\n        ? BigInt(8) * _2n ** BigInt(251) - _1n\n        : BigInt(4) * _2n ** BigInt(445) - _1n;\n    const maxScalar = minScalar + maxAdded + _1n; // (inclusive)\n    const modP = (n) => mod(n, P);\n    const GuBytes = encodeU(Gu);\n    function encodeU(u) {\n        return numberToBytesLE(modP(u), fieldLen);\n    }\n    function decodeU(u) {\n        const _u = copyBytes(abytes(u, fieldLen, \"uCoordinate\"));\n        // RFC: When receiving such an array, implementations of X25519\n        // (but not X448) MUST mask the most significant bit in the final byte.\n        if (is25519)\n            _u[31] &= 127; // 0b0111_1111\n        // RFC: Implementations MUST accept non-canonical values and process them as\n        // if they had been reduced modulo the field prime.  The non-canonical\n        // values are 2^255 - 19 through 2^255 - 1 for X25519 and 2^448 - 2^224\n        // - 1 through 2^448 - 1 for X448.\n        return modP(bytesToNumberLE(_u));\n    }\n    function decodeScalar(scalar) {\n        return bytesToNumberLE(adjustScalarBytes(copyBytes(abytes(scalar, fieldLen, \"scalar\"))));\n    }\n    function scalarMult(scalar, u) {\n        const pu = montgomeryLadder(decodeU(u), decodeScalar(scalar));\n        // Some public keys are useless, of low-order. Curve author doesn't think\n        // it needs to be validated, but we do it nonetheless.\n        // https://cr.yp.to/ecdh.html#validate\n        if (pu === _0n)\n            throw new Error(\"invalid private or public key received\");\n        return encodeU(pu);\n    }\n    // Computes public key from private. By doing scalar multiplication of base point.\n    function scalarMultBase(scalar) {\n        return scalarMult(scalar, GuBytes);\n    }\n    const getPublicKey = scalarMultBase;\n    const getSharedSecret = scalarMult;\n    // cswap from RFC7748 \"example code\"\n    function cswap(swap, x_2, x_3) {\n        // dummy = mask(swap) AND (x_2 XOR x_3)\n        // Where mask(swap) is the all-1 or all-0 word of the same length as x_2\n        // and x_3, computed, e.g., as mask(swap) = 0 - swap.\n        const dummy = modP(swap * (x_2 - x_3));\n        x_2 = modP(x_2 - dummy); // x_2 = x_2 XOR dummy\n        x_3 = modP(x_3 + dummy); // x_3 = x_3 XOR dummy\n        return { x_2, x_3 };\n    }\n    /**\n     * Montgomery x-only multiplication ladder.\n     * @param pointU u coordinate (x) on Montgomery Curve 25519\n     * @param scalar by which the point would be multiplied\n     * @returns new Point on Montgomery curve\n     */\n    function montgomeryLadder(u, scalar) {\n        aInRange(\"u\", u, _0n, P);\n        aInRange(\"scalar\", scalar, minScalar, maxScalar);\n        const k = scalar;\n        const x_1 = u;\n        let x_2 = _1n;\n        let z_2 = _0n;\n        let x_3 = u;\n        let z_3 = _1n;\n        let swap = _0n;\n        for (let t = BigInt(montgomeryBits - 1); t >= _0n; t--) {\n            const k_t = (k >> t) & _1n;\n            swap ^= k_t;\n            ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n            ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n            swap = k_t;\n            const A = x_2 + z_2;\n            const AA = modP(A * A);\n            const B = x_2 - z_2;\n            const BB = modP(B * B);\n            const E = AA - BB;\n            const C = x_3 + z_3;\n            const D = x_3 - z_3;\n            const DA = modP(D * A);\n            const CB = modP(C * B);\n            const dacb = DA + CB;\n            const da_cb = DA - CB;\n            x_3 = modP(dacb * dacb);\n            z_3 = modP(x_1 * modP(da_cb * da_cb));\n            x_2 = modP(AA * BB);\n            z_2 = modP(E * (AA + modP(a24 * E)));\n        }\n        ({ x_2, x_3 } = cswap(swap, x_2, x_3));\n        ({ x_2: z_2, x_3: z_3 } = cswap(swap, z_2, z_3));\n        const z2 = powPminus2(z_2); // `Fp.pow(x, P - _2n)` is much slower equivalent\n        return modP(x_2 * z2); // Return x_2 * (z_2^(p - 2))\n    }\n    const lengths = {\n        secretKey: fieldLen,\n        publicKey: fieldLen,\n        seed: fieldLen,\n    };\n    const randomSecretKey = async (seed) => {\n        if (seed === undefined) {\n            seed = await randomBytes_(fieldLen);\n        }\n        abytes(seed, lengths.seed, \"seed\");\n        return seed;\n    };\n    const utils = { randomSecretKey };\n    return Object.freeze({\n        keygen: createKeygen(randomSecretKey, getPublicKey),\n        getSharedSecret,\n        getPublicKey,\n        scalarMult,\n        scalarMultBase,\n        utils,\n        GuBytes: GuBytes.slice(),\n        lengths,\n    });\n}\n","import { AEAD_USAGES, AeadId, NativeAlgorithm } from \"@hpke/common\";\nexport class AesGcmContext extends NativeAlgorithm {\n    constructor(key) {\n        super();\n        Object.defineProperty(this, \"_rawKey\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_key\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: undefined\n        });\n        this._rawKey = key;\n    }\n    async seal(iv, data, aad) {\n        await this._setupKey();\n        const alg = {\n            name: \"AES-GCM\",\n            iv: iv,\n            additionalData: aad,\n        };\n        const ct = await this._api.encrypt(alg, this._key, data);\n        return ct;\n    }\n    async open(iv, data, aad) {\n        await this._setupKey();\n        const alg = {\n            name: \"AES-GCM\",\n            iv: iv,\n            additionalData: aad,\n        };\n        const pt = await this._api.decrypt(alg, this._key, data);\n        return pt;\n    }\n    async _setupKey() {\n        if (this._key !== undefined) {\n            return;\n        }\n        await this._setup();\n        const key = await this._importKey(this._rawKey);\n        (new Uint8Array(this._rawKey)).fill(0);\n        this._key = key;\n        return;\n    }\n    async _importKey(key) {\n        return await this._api.importKey(\"raw\", key, { name: \"AES-GCM\" }, true, AEAD_USAGES);\n    }\n}\n/**\n * The AES-128-GCM for HPKE AEAD implementing {@link AeadInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.Aes128Gcm`.\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class Aes128Gcm {\n    constructor() {\n        /** AeadId.Aes128Gcm (0x0001) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: AeadId.Aes128Gcm\n        });\n        /** 16 */\n        Object.defineProperty(this, \"keySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 16\n        });\n        /** 12 */\n        Object.defineProperty(this, \"nonceSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 12\n        });\n        /** 16 */\n        Object.defineProperty(this, \"tagSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 16\n        });\n    }\n    createEncryptionContext(key) {\n        return new AesGcmContext(key);\n    }\n}\n/**\n * The AES-256-GCM for HPKE AEAD implementing {@link AeadInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.Aes256Gcm`\n * as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes256Gcm,\n *   CipherSuite,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes256Gcm(),\n * });\n * ```\n */\nexport class Aes256Gcm extends Aes128Gcm {\n    constructor() {\n        super(...arguments);\n        /** AeadId.Aes256Gcm (0x0002) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: AeadId.Aes256Gcm\n        });\n        /** 32 */\n        Object.defineProperty(this, \"keySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        /** 12 */\n        Object.defineProperty(this, \"nonceSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 12\n        });\n        /** 16 */\n        Object.defineProperty(this, \"tagSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 16\n        });\n    }\n}\n","import { AeadId, NotSupportedError } from \"@hpke/common\";\n/**\n * The ExportOnly mode for HPKE AEAD implementing {@link AeadInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `aead` parameter of {@link CipherSuiteParams} instead of `AeadId.ExportOnly`\n * as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   CipherSuite,\n *   DhkemP256HkdfSha256,\n *   ExportOnly,\n *   HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new ExportOnly(),\n * });\n * ```\n */\nexport class ExportOnly {\n    constructor() {\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: AeadId.ExportOnly\n        });\n        Object.defineProperty(this, \"keySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"nonceSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n        Object.defineProperty(this, \"tagSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 0\n        });\n    }\n    createEncryptionContext(_key) {\n        throw new NotSupportedError(\"Export only\");\n    }\n}\n","import { NotSupportedError } from \"@hpke/common\";\nexport function emitNotSupported() {\n    return new Promise((_resolve, reject) => {\n        reject(new NotSupportedError(\"Not supported\"));\n    });\n}\n","import { ExportError, INPUT_LENGTH_LIMIT, InvalidParamError, } from \"@hpke/common\";\nimport { emitNotSupported } from \"./utils/emitNotSupported.js\";\n// b\"sec\"\nconst LABEL_SEC = new Uint8Array([115, 101, 99]);\nexport class ExporterContextImpl {\n    constructor(api, kdf, exporterSecret) {\n        Object.defineProperty(this, \"_api\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"exporterSecret\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_kdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._api = api;\n        this._kdf = kdf;\n        this.exporterSecret = exporterSecret;\n    }\n    async seal(_data, _aad) {\n        return await emitNotSupported();\n    }\n    async open(_data, _aad) {\n        return await emitNotSupported();\n    }\n    async export(exporterContext, len) {\n        if (exporterContext.byteLength > INPUT_LENGTH_LIMIT) {\n            throw new InvalidParamError(\"Too long exporter context\");\n        }\n        try {\n            return await this._kdf.labeledExpand(this.exporterSecret, LABEL_SEC, new Uint8Array(exporterContext), len);\n        }\n        catch (e) {\n            throw new ExportError(e);\n        }\n    }\n}\nexport class RecipientExporterContextImpl extends ExporterContextImpl {\n}\nexport class SenderExporterContextImpl extends ExporterContextImpl {\n    constructor(api, kdf, exporterSecret, enc) {\n        super(api, kdf, exporterSecret);\n        Object.defineProperty(this, \"enc\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.enc = enc;\n        return;\n    }\n}\n","import { i2Osp, MessageLimitReachedError, xor } from \"@hpke/common\";\nimport { ExporterContextImpl } from \"./exporterContext.js\";\nexport class EncryptionContextImpl extends ExporterContextImpl {\n    constructor(api, kdf, params) {\n        super(api, kdf, params.exporterSecret);\n        // AEAD id.\n        Object.defineProperty(this, \"_aead\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The length in bytes of a key for the algorithm.\n        Object.defineProperty(this, \"_nK\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The length in bytes of a nonce for the algorithm.\n        Object.defineProperty(this, \"_nN\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The length in bytes of an authentication tag for the algorithm.\n        Object.defineProperty(this, \"_nT\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // The end-to-end encryption key information.\n        Object.defineProperty(this, \"_ctx\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        if (params.key === undefined || params.baseNonce === undefined ||\n            params.seq === undefined) {\n            throw new Error(\"Required parameters are missing\");\n        }\n        this._aead = params.aead;\n        this._nK = this._aead.keySize;\n        this._nN = this._aead.nonceSize;\n        this._nT = this._aead.tagSize;\n        const key = this._aead.createEncryptionContext(params.key);\n        this._ctx = {\n            key: key,\n            baseNonce: params.baseNonce,\n            seq: params.seq,\n        };\n    }\n    computeNonce(k) {\n        const seqBytes = i2Osp(k.seq, k.baseNonce.byteLength);\n        return xor(k.baseNonce, seqBytes).buffer;\n    }\n    incrementSeq(k) {\n        // if (this.seq >= (1 << (8 * this.baseNonce.byteLength)) - 1) {\n        if (k.seq > Number.MAX_SAFE_INTEGER) {\n            throw new MessageLimitReachedError(\"Message limit reached\");\n        }\n        k.seq += 1;\n        return;\n    }\n}\n","import { EMPTY, OpenError } from \"@hpke/common\";\nimport { EncryptionContextImpl } from \"./encryptionContext.js\";\nexport class RecipientContextImpl extends EncryptionContextImpl {\n    async open(data, aad = EMPTY.buffer) {\n        let pt;\n        try {\n            pt = await this._ctx.key.open(this.computeNonce(this._ctx), data, aad);\n        }\n        catch (e) {\n            throw new OpenError(e);\n        }\n        this.incrementSeq(this._ctx);\n        return pt;\n    }\n}\n","import { EMPTY, SealError } from \"@hpke/common\";\nimport { EncryptionContextImpl } from \"./encryptionContext.js\";\nexport class SenderContextImpl extends EncryptionContextImpl {\n    constructor(api, kdf, params, enc) {\n        super(api, kdf, params);\n        Object.defineProperty(this, \"enc\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this.enc = enc;\n    }\n    async seal(data, aad = EMPTY.buffer) {\n        let ct;\n        try {\n            ct = await this._ctx.key.seal(this.computeNonce(this._ctx), data, aad);\n        }\n        catch (e) {\n            throw new SealError(e);\n        }\n        this.incrementSeq(this._ctx);\n        return ct;\n    }\n}\n","import { AeadId, EMPTY, i2Osp, INFO_LENGTH_LIMIT, INPUT_LENGTH_LIMIT, InvalidParamError, MINIMUM_PSK_LENGTH, Mode, NativeAlgorithm, } from \"@hpke/common\";\nimport { RecipientExporterContextImpl, SenderExporterContextImpl, } from \"./exporterContext.js\";\nimport { RecipientContextImpl } from \"./recipientContext.js\";\nimport { SenderContextImpl } from \"./senderContext.js\";\n// b\"base_nonce\"\n// deno-fmt-ignore\nconst LABEL_BASE_NONCE = new Uint8Array([\n    98, 97, 115, 101, 95, 110, 111, 110, 99, 101,\n]);\n// b\"exp\"\nconst LABEL_EXP = new Uint8Array([101, 120, 112]);\n// b\"info_hash\"\n// deno-fmt-ignore\nconst LABEL_INFO_HASH = new Uint8Array([\n    105, 110, 102, 111, 95, 104, 97, 115, 104,\n]);\n// b\"key\"\nconst LABEL_KEY = new Uint8Array([107, 101, 121]);\n// b\"psk_id_hash\"\n// deno-fmt-ignore\nconst LABEL_PSK_ID_HASH = new Uint8Array([\n    112, 115, 107, 95, 105, 100, 95, 104, 97, 115, 104,\n]);\n// b\"secret\"\nconst LABEL_SECRET = new Uint8Array([115, 101, 99, 114, 101, 116]);\n// b\"HPKE\"\n// deno-fmt-ignore\nconst SUITE_ID_HEADER_HPKE = new Uint8Array([\n    72, 80, 75, 69, 0, 0, 0, 0, 0, 0,\n]);\n/**\n * The Hybrid Public Key Encryption (HPKE) ciphersuite,\n * which is implemented using only\n * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.\n *\n * This is the super class of {@link CipherSuite} and the same as\n * {@link https://jsr.io/@hpke/core/doc/~/CipherSuite | @hpke/core#CipherSuite} as follows:\n * which supports only the ciphersuites that can be implemented on the native\n * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.\n * Therefore, the following cryptographic algorithms are not supported for now:\n *   - DHKEM(X25519, HKDF-SHA256)\n *   - DHKEM(X448, HKDF-SHA512)\n *   - ChaCha20Poly1305\n *\n * In addtion, the HKDF functions contained in this class can only derive\n * keys of the same length as the `hashSize`.\n *\n * If you want to use the unsupported cryptographic algorithms\n * above or derive keys longer than the `hashSize`,\n * please use {@link CipherSuite}.\n *\n * This class provides following functions:\n *\n * - Creates encryption contexts both for senders and recipients.\n *   - {@link createSenderContext}\n *   - {@link createRecipientContext}\n * - Provides single-shot encryption API.\n *   - {@link seal}\n *   - {@link open}\n *\n * The calling of the constructor of this class is the starting\n * point for HPKE operations for both senders and recipients.\n *\n * @example Use only ciphersuites supported by Web Cryptography API.\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n *   CipherSuite,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n *\n * @example Use a ciphersuite which is currently not supported by Web Cryptography API.\n *\n * ```ts\n * import { Aes128Gcm, HkdfSha256, CipherSuite } from \"@hpke/core\";\n * // Use an extension module.\n * import { DhkemX25519HkdfSha256 } from \"@hpke/dhkem-x25519\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemX25519HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class CipherSuiteNative extends NativeAlgorithm {\n    /**\n     * @param params A set of parameters for building a cipher suite.\n     *\n     * If the error occurred, throws {@link InvalidParamError}.\n     *\n     * @throws {@link InvalidParamError}\n     */\n    constructor(params) {\n        super();\n        Object.defineProperty(this, \"_kem\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_kdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_aead\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_suiteId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        // KEM\n        if (typeof params.kem === \"number\") {\n            throw new InvalidParamError(\"KemId cannot be used\");\n        }\n        this._kem = params.kem;\n        // KDF\n        if (typeof params.kdf === \"number\") {\n            throw new InvalidParamError(\"KdfId cannot be used\");\n        }\n        this._kdf = params.kdf;\n        // AEAD\n        if (typeof params.aead === \"number\") {\n            throw new InvalidParamError(\"AeadId cannot be used\");\n        }\n        this._aead = params.aead;\n        this._suiteId = new Uint8Array(SUITE_ID_HEADER_HPKE);\n        this._suiteId.set(i2Osp(this._kem.id, 2), 4);\n        this._suiteId.set(i2Osp(this._kdf.id, 2), 6);\n        this._suiteId.set(i2Osp(this._aead.id, 2), 8);\n        this._kdf.init(this._suiteId);\n    }\n    /**\n     * Gets the KEM context of the ciphersuite.\n     */\n    get kem() {\n        return this._kem;\n    }\n    /**\n     * Gets the KDF context of the ciphersuite.\n     */\n    get kdf() {\n        return this._kdf;\n    }\n    /**\n     * Gets the AEAD context of the ciphersuite.\n     */\n    get aead() {\n        return this._aead;\n    }\n    /**\n     * Creates an encryption context for a sender.\n     *\n     * If the error occurred, throws {@link DecapError} | {@link ValidationError}.\n     *\n     * @param params A set of parameters for the sender encryption context.\n     * @returns A sender encryption context.\n     * @throws {@link EncapError}, {@link ValidationError}\n     */\n    async createSenderContext(params) {\n        this._validateInputLength(params);\n        await this._setup();\n        const dh = await this._kem.encap(params);\n        let mode;\n        if (params.psk !== undefined) {\n            mode = params.senderKey !== undefined ? Mode.AuthPsk : Mode.Psk;\n        }\n        else {\n            mode = params.senderKey !== undefined ? Mode.Auth : Mode.Base;\n        }\n        return await this._keyScheduleS(mode, dh.sharedSecret, dh.enc, params);\n    }\n    /**\n     * Creates an encryption context for a recipient.\n     *\n     * If the error occurred, throws {@link DecapError}\n     * | {@link DeserializeError} | {@link ValidationError}.\n     *\n     * @param params A set of parameters for the recipient encryption context.\n     * @returns A recipient encryption context.\n     * @throws {@link DecapError}, {@link DeserializeError}, {@link ValidationError}\n     */\n    async createRecipientContext(params) {\n        this._validateInputLength(params);\n        await this._setup();\n        const sharedSecret = await this._kem.decap(params);\n        let mode;\n        if (params.psk !== undefined) {\n            mode = params.senderPublicKey !== undefined ? Mode.AuthPsk : Mode.Psk;\n        }\n        else {\n            mode = params.senderPublicKey !== undefined ? Mode.Auth : Mode.Base;\n        }\n        return await this._keyScheduleR(mode, sharedSecret, params);\n    }\n    /**\n     * Encrypts a message to a recipient.\n     *\n     * If the error occurred, throws `EncapError` | `MessageLimitReachedError` | `SealError` | `ValidationError`.\n     *\n     * @param params A set of parameters for building a sender encryption context.\n     * @param pt A plain text as bytes to be encrypted.\n     * @param aad Additional authenticated data as bytes fed by an application.\n     * @returns A cipher text and an encapsulated key as bytes.\n     * @throws {@link EncapError}, {@link MessageLimitReachedError}, {@link SealError}, {@link ValidationError}\n     */\n    async seal(params, pt, aad = EMPTY.buffer) {\n        const ctx = await this.createSenderContext(params);\n        return {\n            ct: await ctx.seal(pt, aad),\n            enc: ctx.enc,\n        };\n    }\n    /**\n     * Decrypts a message from a sender.\n     *\n     * If the error occurred, throws `DecapError` | `DeserializeError` | `OpenError` | `ValidationError`.\n     *\n     * @param params A set of parameters for building a recipient encryption context.\n     * @param ct An encrypted text as bytes to be decrypted.\n     * @param aad Additional authenticated data as bytes fed by an application.\n     * @returns A decrypted plain text as bytes.\n     * @throws {@link DecapError}, {@link DeserializeError}, {@link OpenError}, {@link ValidationError}\n     */\n    async open(params, ct, aad = EMPTY.buffer) {\n        const ctx = await this.createRecipientContext(params);\n        return await ctx.open(ct, aad);\n    }\n    // private verifyPskInputs(mode: Mode, params: KeyScheduleParams) {\n    //   const gotPsk = (params.psk !== undefined);\n    //   const gotPskId = (params.psk !== undefined && params.psk.id.byteLength > 0);\n    //   if (gotPsk !== gotPskId) {\n    //     throw new Error('Inconsistent PSK inputs');\n    //   }\n    //   if (gotPsk && (mode === Mode.Base || mode === Mode.Auth)) {\n    //     throw new Error('PSK input provided when not needed');\n    //   }\n    //   if (!gotPsk && (mode === Mode.Psk || mode === Mode.AuthPsk)) {\n    //     throw new Error('Missing required PSK input');\n    //   }\n    //   return;\n    // }\n    async _keySchedule(mode, sharedSecret, params) {\n        // Currently, there is no point in executing this function\n        // because this hpke library does not allow users to explicitly specify the mode.\n        //\n        // this.verifyPskInputs(mode, params);\n        const pskId = params.psk === undefined\n            ? EMPTY\n            : new Uint8Array(params.psk.id);\n        const pskIdHash = await this._kdf.labeledExtract(EMPTY.buffer, LABEL_PSK_ID_HASH, pskId);\n        const info = params.info === undefined\n            ? EMPTY\n            : new Uint8Array(params.info);\n        const infoHash = await this._kdf.labeledExtract(EMPTY.buffer, LABEL_INFO_HASH, info);\n        const keyScheduleContext = new Uint8Array(1 + pskIdHash.byteLength + infoHash.byteLength);\n        keyScheduleContext.set(new Uint8Array([mode]), 0);\n        keyScheduleContext.set(new Uint8Array(pskIdHash), 1);\n        keyScheduleContext.set(new Uint8Array(infoHash), 1 + pskIdHash.byteLength);\n        const psk = params.psk === undefined\n            ? EMPTY\n            : new Uint8Array(params.psk.key);\n        const ikm = this._kdf.buildLabeledIkm(LABEL_SECRET, psk)\n            .buffer;\n        const exporterSecretInfo = this._kdf.buildLabeledInfo(LABEL_EXP, keyScheduleContext, this._kdf.hashSize).buffer;\n        const exporterSecret = await this._kdf.extractAndExpand(sharedSecret, ikm, exporterSecretInfo, this._kdf.hashSize);\n        if (this._aead.id === AeadId.ExportOnly) {\n            return { aead: this._aead, exporterSecret: exporterSecret };\n        }\n        const keyInfo = this._kdf.buildLabeledInfo(LABEL_KEY, keyScheduleContext, this._aead.keySize).buffer;\n        const key = await this._kdf.extractAndExpand(sharedSecret, ikm, keyInfo, this._aead.keySize);\n        const baseNonceInfo = this._kdf.buildLabeledInfo(LABEL_BASE_NONCE, keyScheduleContext, this._aead.nonceSize).buffer;\n        const baseNonce = await this._kdf.extractAndExpand(sharedSecret, ikm, baseNonceInfo, this._aead.nonceSize);\n        return {\n            aead: this._aead,\n            exporterSecret: exporterSecret,\n            key: key,\n            baseNonce: new Uint8Array(baseNonce),\n            seq: 0,\n        };\n    }\n    async _keyScheduleS(mode, sharedSecret, enc, params) {\n        const res = await this._keySchedule(mode, sharedSecret, params);\n        if (res.key === undefined) {\n            return new SenderExporterContextImpl(this._api, this._kdf, res.exporterSecret, enc);\n        }\n        return new SenderContextImpl(this._api, this._kdf, res, enc);\n    }\n    async _keyScheduleR(mode, sharedSecret, params) {\n        const res = await this._keySchedule(mode, sharedSecret, params);\n        if (res.key === undefined) {\n            return new RecipientExporterContextImpl(this._api, this._kdf, res.exporterSecret);\n        }\n        return new RecipientContextImpl(this._api, this._kdf, res);\n    }\n    _validateInputLength(params) {\n        if (params.info !== undefined &&\n            params.info.byteLength > INFO_LENGTH_LIMIT) {\n            throw new InvalidParamError(\"Too long info\");\n        }\n        if (params.psk !== undefined) {\n            if (params.psk.key.byteLength < MINIMUM_PSK_LENGTH) {\n                throw new InvalidParamError(`PSK must have at least ${MINIMUM_PSK_LENGTH} bytes`);\n            }\n            if (params.psk.key.byteLength > INPUT_LENGTH_LIMIT) {\n                throw new InvalidParamError(\"Too long psk.key\");\n            }\n            if (params.psk.id.byteLength > INPUT_LENGTH_LIMIT) {\n                throw new InvalidParamError(\"Too long psk.id\");\n            }\n        }\n        return;\n    }\n}\n","import { Dhkem, Ec, HkdfSha256Native, HkdfSha384Native, HkdfSha512Native, KemId, } from \"@hpke/common\";\nexport class DhkemP256HkdfSha256Native extends Dhkem {\n    constructor() {\n        const kdf = new HkdfSha256Native();\n        const prim = new Ec(KemId.DhkemP256HkdfSha256, kdf);\n        super(KemId.DhkemP256HkdfSha256, prim, kdf);\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KemId.DhkemP256HkdfSha256\n        });\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 65\n        });\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 65\n        });\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n    }\n}\nexport class DhkemP384HkdfSha384Native extends Dhkem {\n    constructor() {\n        const kdf = new HkdfSha384Native();\n        const prim = new Ec(KemId.DhkemP384HkdfSha384, kdf);\n        super(KemId.DhkemP384HkdfSha384, prim, kdf);\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KemId.DhkemP384HkdfSha384\n        });\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 48\n        });\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 97\n        });\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 97\n        });\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 48\n        });\n    }\n}\nexport class DhkemP521HkdfSha512Native extends Dhkem {\n    constructor() {\n        const kdf = new HkdfSha512Native();\n        const prim = new Ec(KemId.DhkemP521HkdfSha512, kdf);\n        super(KemId.DhkemP521HkdfSha512, prim, kdf);\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KemId.DhkemP521HkdfSha512\n        });\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 64\n        });\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 133\n        });\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 133\n        });\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 64\n        });\n    }\n}\n","import { HkdfSha256Native, HkdfSha384Native, HkdfSha512Native, } from \"@hpke/common\";\nimport { CipherSuiteNative } from \"./cipherSuiteNative.js\";\nimport { DhkemP256HkdfSha256Native, DhkemP384HkdfSha384Native, DhkemP521HkdfSha512Native, } from \"./kems/dhkemNative.js\";\n/**\n * The Hybrid Public Key Encryption (HPKE) ciphersuite,\n * which is implemented using only\n * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.\n *\n * This class is the same as\n * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteNative | @hpke/core#CipherSuiteNative} as follows:\n * which supports only the ciphersuites that can be implemented on the native\n * {@link https://www.w3.org/TR/WebCryptoAPI/ | Web Cryptography API}.\n * Therefore, the following cryptographic algorithms are not supported for now:\n * - `DHKEM(X25519, HKDF-SHA256)`\n * - `DHKEM(X448, HKDF-SHA512)`\n * - `ChaCha20Poly1305`\n *\n * In addtion, the HKDF functions contained in this `CipherSuiteNative`\n * class can only derive keys of the same length as the `hashSize`.\n *\n * If you want to use the unsupported cryptographic algorithms\n * above or derive keys longer than the `hashSize`,\n * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.\n *\n * This class provides following functions:\n *\n * - Creates encryption contexts both for senders and recipients.\n *     - {@link createSenderContext}\n *     - {@link createRecipientContext}\n * - Provides single-shot encryption API.\n *     - {@link seal}\n *     - {@link open}\n *\n * The calling of the constructor of this class is the starting\n * point for HPKE operations for both senders and recipients.\n *\n * @example Use only ciphersuites supported by Web Cryptography API.\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n *   CipherSuite,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n *\n * @example Use a ciphersuite which is currently not supported by Web Cryptography API.\n *\n * ```ts\n * import { Aes128Gcm, HkdfSha256, CipherSuite } from \"@hpke/core\";\n * import { DhkemX25519HkdfSha256 } from \"@hpke/dhkem-x25519\";\n * const suite = new CipherSuite({\n *   kem: new DhkemX25519HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class CipherSuite extends CipherSuiteNative {\n}\n/**\n * The DHKEM(P-256, HKDF-SHA256) for HPKE KEM implementing {@link KemInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP256HkdfSha256`\n * as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class DhkemP256HkdfSha256 extends DhkemP256HkdfSha256Native {\n}\n/**\n * The DHKEM(P-384, HKDF-SHA384) for HPKE KEM implementing {@link KemInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP384HkdfSha384`\n * as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   DhkemP384HkdfSha384,\n *   HkdfSha384,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP384HkdfSha384(),\n *   kdf: new HkdfSha384(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class DhkemP384HkdfSha384 extends DhkemP384HkdfSha384Native {\n}\n/**\n * The DHKEM(P-521, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KemId.DhkemP521HkdfSha512`\n * as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes256Gcm,\n *   CipherSuite,\n *   DhkemP521HkdfSha512,\n *   HkdfSha512,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP521HkdfSha512(),\n *   kdf: new HkdfSha512(),\n *   aead: new Aes256Gcm(),\n * });\n * ```\n */\nexport class DhkemP521HkdfSha512 extends DhkemP521HkdfSha512Native {\n}\n/**\n * The HKDF-SHA256 for HPKE KDF implementing {@link KdfInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha256`.\n *\n * The KDF class can only derive keys of the same length as the `hashSize`.\n * If you want to derive keys longer than the `hashSize`,\n * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   DhkemP256HkdfSha256,\n *   HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP256HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class HkdfSha256 extends HkdfSha256Native {\n}\n/**\n * The HKDF-SHA384 for HPKE KDF implementing {@link KdfInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha384`.\n *\n * The KDF class can only derive keys of the same length as the `hashSize`.\n * If you want to derive keys longer than the `hashSize`,\n * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   DhkemP384HkdfSha384,\n *   HkdfSha384,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP384HkdfSha384(),\n *   kdf: new HkdfSha384(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class HkdfSha384 extends HkdfSha384Native {\n}\n/**\n * The HKDF-SHA512 for HPKE KDF implementing {@link KdfInterface}.\n *\n * When using `@hpke/core`, the instance of this class must be specified\n * to the `kem` parameter of {@link CipherSuiteParams} instead of `KdfId.HkdfSha512`.\n *\n * The KDF class can only derive keys of the same length as the `hashSize`.\n * If you want to derive keys longer than the `hashSize`,\n * please use {@link https://jsr.io/@hpke/hpke-js/doc/~/CipherSuite | hpke-js#CipherSuite}.\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes256Gcm,\n *   CipherSuite,\n *   DhkemP521HkdfSha512,\n *   HkdfSha512,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemP521HkdfSha512(),\n *   kdf: new HkdfSha512(),\n *   aead: new Aes256Gcm(),\n * });\n * ```\n */\nexport class HkdfSha512 extends HkdfSha512Native {\n}\n","import { base64UrlToBytes, DeriveKeyPairError, DeserializeError, EMPTY, KEM_USAGES, LABEL_DKP_PRK, LABEL_SK, NativeAlgorithm, NotSupportedError, SerializeError, } from \"@hpke/common\";\nconst ALG_NAME = \"X25519\";\n// deno-fmt-ignore\nconst PKCS8_ALG_ID_X25519 = new Uint8Array([\n    0x30, 0x2e, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06,\n    0x03, 0x2b, 0x65, 0x6e, 0x04, 0x22, 0x04, 0x20,\n]);\nexport class X25519 extends NativeAlgorithm {\n    constructor(hkdf) {\n        super();\n        Object.defineProperty(this, \"_hkdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_alg\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nPk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nSk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nDh\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pkcs8AlgId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._alg = { name: ALG_NAME };\n        this._hkdf = hkdf;\n        this._nPk = 32;\n        this._nSk = 32;\n        this._nDh = 32;\n        this._pkcs8AlgId = PKCS8_ALG_ID_X25519;\n    }\n    async serializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._api.exportKey(\"raw\", key);\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, true);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async serializePrivateKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            if (!(\"d\" in jwk)) {\n                throw new Error(\"Not private key\");\n            }\n            return base64UrlToBytes(jwk[\"d\"]).buffer;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePrivateKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, false);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async importKey(format, key, isPublic) {\n        await this._setup();\n        try {\n            if (format === \"raw\") {\n                return await this._importRawKey(key, isPublic);\n            }\n            // jwk\n            if (key instanceof ArrayBuffer) {\n                throw new Error(\"Invalid jwk key format\");\n            }\n            return await this._importJWK(key, isPublic);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async generateKeyPair() {\n        await this._setup();\n        try {\n            return await this._api.generateKey(ALG_NAME, true, KEM_USAGES);\n        }\n        catch (e) {\n            throw new NotSupportedError(e);\n        }\n    }\n    async deriveKeyPair(ikm) {\n        await this._setup();\n        try {\n            const dkpPrk = await this._hkdf.labeledExtract(EMPTY.buffer, LABEL_DKP_PRK, new Uint8Array(ikm));\n            const rawSk = await this._hkdf.labeledExpand(dkpPrk, LABEL_SK, EMPTY, this._nSk);\n            const rawSkBytes = new Uint8Array(rawSk);\n            const sk = await this._deserializePkcs8Key(rawSkBytes);\n            rawSkBytes.fill(0);\n            return {\n                privateKey: sk,\n                publicKey: await this.derivePublicKey(sk),\n            };\n        }\n        catch (e) {\n            throw new DeriveKeyPairError(e);\n        }\n    }\n    async derivePublicKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            delete jwk[\"d\"];\n            delete jwk[\"key_ops\"];\n            return await this._api.importKey(\"jwk\", jwk, this._alg, true, []);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async dh(sk, pk) {\n        await this._setup();\n        try {\n            const bits = await this._api.deriveBits({\n                name: ALG_NAME,\n                public: pk,\n            }, sk, this._nDh * 8);\n            return bits;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async _importRawKey(key, isPublic) {\n        if (isPublic && key.byteLength !== this._nPk) {\n            throw new Error(\"Invalid public key for the ciphersuite\");\n        }\n        if (!isPublic && key.byteLength !== this._nSk) {\n            throw new Error(\"Invalid private key for the ciphersuite\");\n        }\n        if (isPublic) {\n            return await this._api.importKey(\"raw\", key, this._alg, true, []);\n        }\n        return await this._deserializePkcs8Key(new Uint8Array(key));\n    }\n    async _importJWK(key, isPublic) {\n        if (typeof key.kty === \"undefined\" || key.kty !== \"OKP\") {\n            throw new Error(`Invalid kty: ${key.crv}`);\n        }\n        if (typeof key.crv === \"undefined\" || key.crv !== ALG_NAME) {\n            throw new Error(`Invalid crv: ${key.crv}`);\n        }\n        if (isPublic) {\n            if (typeof key.d !== \"undefined\") {\n                throw new Error(\"Invalid key: `d` should not be set\");\n            }\n            return await this._api.importKey(\"jwk\", key, this._alg, true, []);\n        }\n        if (typeof key.d === \"undefined\") {\n            throw new Error(\"Invalid key: `d` not found\");\n        }\n        return await this._api.importKey(\"jwk\", key, this._alg, true, KEM_USAGES);\n    }\n    async _deserializePkcs8Key(k) {\n        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);\n        pkcs8Key.set(this._pkcs8AlgId, 0);\n        pkcs8Key.set(k, this._pkcs8AlgId.length);\n        return await this._api.importKey(\"pkcs8\", pkcs8Key, this._alg, true, KEM_USAGES);\n    }\n}\n","import { Dhkem, HkdfSha256Native, KemId } from \"@hpke/common\";\nimport { X25519 } from \"./dhkemPrimitives/x25519.js\";\n/**\n * The DHKEM(X25519, HKDF-SHA256) for HPKE KEM implementing {@link KemInterface}.\n *\n * The instance of this class can be specified to the\n * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes128Gcm,\n *   CipherSuite,\n *   HkdfSha256,\n *   DhkemX25519HkdfSha256,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemX25519HkdfSha256(),\n *   kdf: new HkdfSha256(),\n *   aead: new Aes128Gcm(),\n * });\n * ```\n */\nexport class DhkemX25519HkdfSha256 extends Dhkem {\n    constructor() {\n        const kdf = new HkdfSha256Native();\n        super(KemId.DhkemX25519HkdfSha256, new X25519(kdf), kdf);\n        /** KemId.DhkemX25519HkdfSha256 (0x0020) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KemId.DhkemX25519HkdfSha256\n        });\n        /** 32 */\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        /** 32 */\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        /** 32 */\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n        /** 32 */\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 32\n        });\n    }\n}\n","import { base64UrlToBytes, DeriveKeyPairError, DeserializeError, EMPTY, KEM_USAGES, LABEL_DKP_PRK, LABEL_SK, NativeAlgorithm, NotSupportedError, SerializeError, } from \"@hpke/common\";\nconst ALG_NAME = \"X448\";\n// deno-fmt-ignore\nconst PKCS8_ALG_ID_X448 = new Uint8Array([\n    0x30, 0x46, 0x02, 0x01, 0x00, 0x30, 0x05, 0x06,\n    0x03, 0x2b, 0x65, 0x6f, 0x04, 0x3a, 0x04, 0x38,\n]);\nexport class X448 extends NativeAlgorithm {\n    constructor(hkdf) {\n        super();\n        Object.defineProperty(this, \"_hkdf\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_alg\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nPk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nSk\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_nDh\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        Object.defineProperty(this, \"_pkcs8AlgId\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: void 0\n        });\n        this._alg = { name: ALG_NAME };\n        this._hkdf = hkdf;\n        this._nPk = 56;\n        this._nSk = 56;\n        this._nDh = 56;\n        this._pkcs8AlgId = PKCS8_ALG_ID_X448;\n    }\n    async serializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._api.exportKey(\"raw\", key);\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePublicKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, true);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async serializePrivateKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            if (!(\"d\" in jwk)) {\n                throw new Error(\"Not private key\");\n            }\n            return base64UrlToBytes(jwk[\"d\"]).buffer;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async deserializePrivateKey(key) {\n        await this._setup();\n        try {\n            return await this._importRawKey(key, false);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async importKey(format, key, isPublic) {\n        await this._setup();\n        try {\n            if (format === \"raw\") {\n                return await this._importRawKey(key, isPublic);\n            }\n            // jwk\n            if (key instanceof ArrayBuffer) {\n                throw new Error(\"Invalid jwk key format\");\n            }\n            return await this._importJWK(key, isPublic);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async generateKeyPair() {\n        await this._setup();\n        try {\n            return await this._api.generateKey(ALG_NAME, true, KEM_USAGES);\n        }\n        catch (e) {\n            throw new NotSupportedError(e);\n        }\n    }\n    async deriveKeyPair(ikm) {\n        await this._setup();\n        try {\n            const dkpPrk = await this._hkdf.labeledExtract(EMPTY.buffer, LABEL_DKP_PRK, new Uint8Array(ikm));\n            const rawSk = await this._hkdf.labeledExpand(dkpPrk, LABEL_SK, EMPTY, this._nSk);\n            const rawSkBytes = new Uint8Array(rawSk);\n            const sk = await this._deserializePkcs8Key(rawSkBytes);\n            rawSkBytes.fill(0);\n            return {\n                privateKey: sk,\n                publicKey: await this.derivePublicKey(sk),\n            };\n        }\n        catch (e) {\n            throw new DeriveKeyPairError(e);\n        }\n    }\n    async derivePublicKey(key) {\n        await this._setup();\n        try {\n            const jwk = await this._api.exportKey(\"jwk\", key);\n            delete jwk[\"d\"];\n            delete jwk[\"key_ops\"];\n            return await this._api.importKey(\"jwk\", jwk, this._alg, true, []);\n        }\n        catch (e) {\n            throw new DeserializeError(e);\n        }\n    }\n    async dh(sk, pk) {\n        await this._setup();\n        try {\n            const bits = await this._api.deriveBits({\n                name: ALG_NAME,\n                public: pk,\n            }, sk, this._nDh * 8);\n            return bits;\n        }\n        catch (e) {\n            throw new SerializeError(e);\n        }\n    }\n    async _importRawKey(key, isPublic) {\n        if (isPublic && key.byteLength !== this._nPk) {\n            throw new Error(\"Invalid public key for the ciphersuite\");\n        }\n        if (!isPublic && key.byteLength !== this._nSk) {\n            throw new Error(\"Invalid private key for the ciphersuite\");\n        }\n        if (isPublic) {\n            return await this._api.importKey(\"raw\", key, this._alg, true, []);\n        }\n        return await this._deserializePkcs8Key(new Uint8Array(key));\n    }\n    async _importJWK(key, isPublic) {\n        if (typeof key.kty === \"undefined\" || key.kty !== \"OKP\") {\n            throw new Error(`Invalid kty: ${key.crv}`);\n        }\n        if (typeof key.crv === \"undefined\" || key.crv !== ALG_NAME) {\n            throw new Error(`Invalid crv: ${key.crv}`);\n        }\n        if (isPublic) {\n            if (typeof key.d !== \"undefined\") {\n                throw new Error(\"Invalid key: `d` should not be set\");\n            }\n            return await this._api.importKey(\"jwk\", key, this._alg, true, []);\n        }\n        if (typeof key.d === \"undefined\") {\n            throw new Error(\"Invalid key: `d` not found\");\n        }\n        return await this._api.importKey(\"jwk\", key, this._alg, true, KEM_USAGES);\n    }\n    async _deserializePkcs8Key(k) {\n        const pkcs8Key = new Uint8Array(this._pkcs8AlgId.length + k.length);\n        pkcs8Key.set(this._pkcs8AlgId, 0);\n        pkcs8Key.set(k, this._pkcs8AlgId.length);\n        return await this._api.importKey(\"pkcs8\", pkcs8Key, this._alg, true, KEM_USAGES);\n    }\n}\n","import { Dhkem, HkdfSha512Native, KemId } from \"@hpke/common\";\nimport { X448 } from \"./dhkemPrimitives/x448.js\";\n/**\n * The DHKEM(X448, HKDF-SHA512) for HPKE KEM implementing {@link KemInterface}.\n *\n * The instance of this class can be specified to the\n * {@link https://jsr.io/@hpke/core/doc/~/CipherSuiteParams | CipherSuiteParams} as follows:\n *\n * @example\n *\n * ```ts\n * import {\n *   Aes256Gcm,\n *   CipherSuite,\n *   HkdfSha512,\n *   DhkemX448HkdfSha512,\n * } from \"@hpke/core\";\n *\n * const suite = new CipherSuite({\n *   kem: new DhkemX448HkdfSha512(),\n *   kdf: new HkdfSha512(),\n *   aead: new Aes256Gcm(),\n * });\n * ```\n */\nexport class DhkemX448HkdfSha512 extends Dhkem {\n    constructor() {\n        const kdf = new HkdfSha512Native();\n        super(KemId.DhkemX448HkdfSha512, new X448(kdf), kdf);\n        /** KemId.DhkemX448HkdfSha512 (0x0021) */\n        Object.defineProperty(this, \"id\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: KemId.DhkemX448HkdfSha512\n        });\n        /** 64 */\n        Object.defineProperty(this, \"secretSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 64\n        });\n        /** 56 */\n        Object.defineProperty(this, \"encSize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 56\n        });\n        /** 56 */\n        Object.defineProperty(this, \"publicKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 56\n        });\n        /** 56 */\n        Object.defineProperty(this, \"privateKeySize\", {\n            enumerable: true,\n            configurable: true,\n            writable: true,\n            value: 56\n        });\n    }\n}\n","/*! noble-ed25519 - MIT License (c) 2019 Paul Miller (paulmillr.com) */\n/**\n * 4KB JS implementation of ed25519 EdDSA signatures.\n * Compliant with RFC8032, FIPS 186-5 & ZIP215.\n * @module\n * @example\n * ```js\nimport * as ed from '@noble/ed25519';\n(async () => {\n  const privKey = ed.utils.randomPrivateKey();\n  const message = Uint8Array.from([0xab, 0xbc, 0xcd, 0xde]);\n  const pubKey = await ed.getPublicKeyAsync(privKey); // Sync methods are also present\n  const signature = await ed.signAsync(message, privKey);\n  const isValid = await ed.verifyAsync(signature, message, pubKey);\n})();\n```\n */\n/**\n * Curve params. ed25519 is twisted edwards curve. Equation is −x² + y² = -a + dx²y².\n * * P = `2n**255n - 19n` // field over which calculations are done\n * * N = `2n**252n + 27742317777372353535851937790883648493n` // group order, amount of curve points\n * * h = 8 // cofactor\n * * a = `Fp.create(BigInt(-1))` // equation param\n * * d = -121665/121666 a.k.a. `Fp.neg(121665 * Fp.inv(121666))` // equation param\n * * Gx, Gy are coordinates of Generator / base point\n */\nconst ed25519_CURVE = {\n    p: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffedn,\n    n: 0x1000000000000000000000000000000014def9dea2f79cd65812631a5cf5d3edn,\n    h: 8n,\n    a: 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffecn,\n    d: 0x52036cee2b6ffe738cc740797779e89800700a4d4141d8ab75eb4dca135978a3n,\n    Gx: 0x216936d3cd6e53fec0a4e231fdd6dc5c692cc7609525a7b2c9562d608f25d51an,\n    Gy: 0x6666666666666666666666666666666666666666666666666666666666666658n,\n};\nconst { p: P, n: N, Gx, Gy, a: _a, d: _d } = ed25519_CURVE;\nconst h = 8n; // cofactor\nconst L = 32; // field / group byte length\nconst L2 = 64;\n// Helpers and Precomputes sections are reused between libraries\n// ## Helpers\n// ----------\n// error helper, messes-up stack trace\nconst err = (m = '') => {\n    throw new Error(m);\n};\nconst isBig = (n) => typeof n === 'bigint'; // is big integer\nconst isStr = (s) => typeof s === 'string'; // is string\nconst isBytes = (a) => a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n/** assert is Uint8Array (of specific length) */\nconst abytes = (a, l) => !isBytes(a) || (typeof l === 'number' && l > 0 && a.length !== l)\n    ? err('Uint8Array expected')\n    : a;\n/** create Uint8Array */\nconst u8n = (len) => new Uint8Array(len);\nconst u8fr = (buf) => Uint8Array.from(buf);\nconst padh = (n, pad) => n.toString(16).padStart(pad, '0');\nconst bytesToHex = (b) => Array.from(abytes(b))\n    .map((e) => padh(e, 2))\n    .join('');\nconst C = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 }; // ASCII characters\nconst _ch = (ch) => {\n    if (ch >= C._0 && ch <= C._9)\n        return ch - C._0; // '2' => 50-48\n    if (ch >= C.A && ch <= C.F)\n        return ch - (C.A - 10); // 'B' => 66-(65-10)\n    if (ch >= C.a && ch <= C.f)\n        return ch - (C.a - 10); // 'b' => 98-(97-10)\n    return;\n};\nconst hexToBytes = (hex) => {\n    const e = 'hex invalid';\n    if (!isStr(hex))\n        return err(e);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        return err(e);\n    const array = u8n(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        // treat each char as ASCII\n        const n1 = _ch(hex.charCodeAt(hi)); // parse first char, multiply it by 16\n        const n2 = _ch(hex.charCodeAt(hi + 1)); // parse second char\n        if (n1 === undefined || n2 === undefined)\n            return err(e);\n        array[ai] = n1 * 16 + n2; // example: 'A9' => 10*16 + 9\n    }\n    return array;\n};\n/** normalize hex or ui8a to ui8a */\nconst toU8 = (a, len) => abytes(isStr(a) ? hexToBytes(a) : u8fr(abytes(a)), len);\nconst cr = () => globalThis?.crypto; // WebCrypto is available in all modern environments\nconst subtle = () => cr()?.subtle ?? err('crypto.subtle must be defined');\n// prettier-ignore\nconst concatBytes = (...arrs) => {\n    const r = u8n(arrs.reduce((sum, a) => sum + abytes(a).length, 0)); // create u8a of summed length\n    let pad = 0; // walk through each array,\n    arrs.forEach(a => { r.set(a, pad); pad += a.length; }); // ensure they have proper type\n    return r;\n};\n/** WebCrypto OS-level CSPRNG (random number generator). Will throw when not available. */\nconst randomBytes = (len = L) => {\n    const c = cr();\n    return c.getRandomValues(u8n(len));\n};\nconst big = BigInt;\nconst arange = (n, min, max, msg = 'bad number: out of range') => isBig(n) && min <= n && n < max ? n : err(msg);\n/** modular division */\nconst M = (a, b = P) => {\n    const r = a % b;\n    return r >= 0n ? r : b + r;\n};\nconst modN = (a) => M(a, N);\n/** Modular inversion using eucledian GCD (non-CT). No negative exponent for now. */\n// prettier-ignore\nconst invert = (num, md) => {\n    if (num === 0n || md <= 0n)\n        err('no inverse n=' + num + ' mod=' + md);\n    let a = M(num, md), b = md, x = 0n, y = 1n, u = 1n, v = 0n;\n    while (a !== 0n) {\n        const q = b / a, r = b % a;\n        const m = x - u * q, n = y - v * q;\n        b = a, a = r, x = u, y = v, u = m, v = n;\n    }\n    return b === 1n ? M(x, md) : err('no inverse'); // b is gcd at this point\n};\nconst callHash = (name) => {\n    // @ts-ignore\n    const fn = etc[name];\n    if (typeof fn !== 'function')\n        err('hashes.' + name + ' not set');\n    return fn;\n};\nconst apoint = (p) => (p instanceof Point ? p : err('Point expected'));\n// ## End of Helpers\n// -----------------\nconst B256 = 2n ** 256n;\n/** Point in XYZT extended coordinates. */\nclass Point {\n    static BASE;\n    static ZERO;\n    ex;\n    ey;\n    ez;\n    et;\n    constructor(ex, ey, ez, et) {\n        const max = B256;\n        this.ex = arange(ex, 0n, max);\n        this.ey = arange(ey, 0n, max);\n        this.ez = arange(ez, 1n, max);\n        this.et = arange(et, 0n, max);\n        Object.freeze(this);\n    }\n    static fromAffine(p) {\n        return new Point(p.x, p.y, 1n, M(p.x * p.y));\n    }\n    /** RFC8032 5.1.3: Uint8Array to Point. */\n    static fromBytes(hex, zip215 = false) {\n        const d = _d;\n        // Copy array to not mess it up.\n        const normed = u8fr(abytes(hex, L));\n        // adjust first LE byte = last BE byte\n        const lastByte = hex[31];\n        normed[31] = lastByte & ~0x80;\n        const y = bytesToNumLE(normed);\n        // zip215=true:           0 <= y < 2^256\n        // zip215=false, RFC8032: 0 <= y < 2^255-19\n        const max = zip215 ? B256 : P;\n        arange(y, 0n, max);\n        const y2 = M(y * y); // y²\n        const u = M(y2 - 1n); // u=y²-1\n        const v = M(d * y2 + 1n); // v=dy²+1\n        let { isValid, value: x } = uvRatio(u, v); // (uv³)(uv⁷)^(p-5)/8; square root\n        if (!isValid)\n            err('bad point: y not sqrt'); // not square root: bad point\n        const isXOdd = (x & 1n) === 1n; // adjust sign of x coordinate\n        const isLastByteOdd = (lastByte & 0x80) !== 0; // x_0, last bit\n        if (!zip215 && x === 0n && isLastByteOdd)\n            err('bad point: x==0, isLastByteOdd'); // x=0, x_0=1\n        if (isLastByteOdd !== isXOdd)\n            x = M(-x);\n        return new Point(x, y, 1n, M(x * y)); // Z=1, T=xy\n    }\n    /** Checks if the point is valid and on-curve. */\n    assertValidity() {\n        const a = _a;\n        const d = _d;\n        const p = this;\n        if (p.is0())\n            throw new Error('bad point: ZERO'); // TODO: optimize, with vars below?\n        // Equation in affine coordinates: ax² + y² = 1 + dx²y²\n        // Equation in projective coordinates (X/Z, Y/Z, Z):  (aX² + Y²)Z² = Z⁴ + dX²Y²\n        const { ex: X, ey: Y, ez: Z, et: T } = p;\n        const X2 = M(X * X); // X²\n        const Y2 = M(Y * Y); // Y²\n        const Z2 = M(Z * Z); // Z²\n        const Z4 = M(Z2 * Z2); // Z⁴\n        const aX2 = M(X2 * a); // aX²\n        const left = M(Z2 * M(aX2 + Y2)); // (aX² + Y²)Z²\n        const right = M(Z4 + M(d * M(X2 * Y2))); // Z⁴ + dX²Y²\n        if (left !== right)\n            throw new Error('bad point: equation left != right (1)');\n        // In Extended coordinates we also have T, which is x*y=T/Z: check X*Y == Z*T\n        const XY = M(X * Y);\n        const ZT = M(Z * T);\n        if (XY !== ZT)\n            throw new Error('bad point: equation left != right (2)');\n        return this;\n    }\n    /** Equality check: compare points P&Q. */\n    equals(other) {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2 } = apoint(other); // checks class equality\n        const X1Z2 = M(X1 * Z2);\n        const X2Z1 = M(X2 * Z1);\n        const Y1Z2 = M(Y1 * Z2);\n        const Y2Z1 = M(Y2 * Z1);\n        return X1Z2 === X2Z1 && Y1Z2 === Y2Z1;\n    }\n    is0() {\n        return this.equals(I);\n    }\n    /** Flip point over y coordinate. */\n    negate() {\n        return new Point(M(-this.ex), this.ey, this.ez, M(-this.et));\n    }\n    /** Point doubling. Complete formula. Cost: `4M + 4S + 1*a + 6add + 1*2`. */\n    double() {\n        const { ex: X1, ey: Y1, ez: Z1 } = this;\n        const a = _a;\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended.html#doubling-dbl-2008-hwcd\n        const A = M(X1 * X1);\n        const B = M(Y1 * Y1);\n        const C = M(2n * M(Z1 * Z1));\n        const D = M(a * A);\n        const x1y1 = X1 + Y1;\n        const E = M(M(x1y1 * x1y1) - A - B);\n        const G = D + B;\n        const F = G - C;\n        const H = D - B;\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    /** Point addition. Complete formula. Cost: `8M + 1*k + 8add + 1*2`. */\n    add(other) {\n        const { ex: X1, ey: Y1, ez: Z1, et: T1 } = this;\n        const { ex: X2, ey: Y2, ez: Z2, et: T2 } = apoint(other); // doesn't check if other on-curve\n        const a = _a;\n        const d = _d;\n        // https://hyperelliptic.org/EFD/g1p/auto-twisted-extended-1.html#addition-add-2008-hwcd-3\n        const A = M(X1 * X2);\n        const B = M(Y1 * Y2);\n        const C = M(T1 * d * T2);\n        const D = M(Z1 * Z2);\n        const E = M((X1 + Y1) * (X2 + Y2) - A - B);\n        const F = M(D - C);\n        const G = M(D + C);\n        const H = M(B - a * A);\n        const X3 = M(E * F);\n        const Y3 = M(G * H);\n        const T3 = M(E * H);\n        const Z3 = M(F * G);\n        return new Point(X3, Y3, Z3, T3);\n    }\n    /**\n     * Point-by-scalar multiplication. Scalar must be in range 1 <= n < CURVE.n.\n     * Uses {@link wNAF} for base point.\n     * Uses fake point to mitigate side-channel leakage.\n     * @param n scalar by which point is multiplied\n     * @param safe safe mode guards against timing attacks; unsafe mode is faster\n     */\n    multiply(n, safe = true) {\n        if (!safe && (n === 0n || this.is0()))\n            return I;\n        arange(n, 1n, N);\n        if (n === 1n)\n            return this;\n        if (this.equals(G))\n            return wNAF(n).p;\n        // init result point & fake point\n        let p = I;\n        let f = G;\n        for (let d = this; n > 0n; d = d.double(), n >>= 1n) {\n            // if bit is present, add to point\n            // if not present, add to fake, for timing safety\n            if (n & 1n)\n                p = p.add(d);\n            else if (safe)\n                f = f.add(d);\n        }\n        return p;\n    }\n    /** Convert point to 2d xy affine point. (X, Y, Z) ∋ (x=X/Z, y=Y/Z) */\n    toAffine() {\n        const { ex: x, ey: y, ez: z } = this;\n        // fast-paths for ZERO point OR Z=1\n        if (this.equals(I))\n            return { x: 0n, y: 1n };\n        const iz = invert(z, P);\n        // (Z * Z^-1) must be 1, otherwise bad math\n        if (M(z * iz) !== 1n)\n            err('invalid inverse');\n        // x = X*Z^-1; y = Y*Z^-1\n        return { x: M(x * iz), y: M(y * iz) };\n    }\n    toBytes() {\n        const { x, y } = this.assertValidity().toAffine();\n        const b = numTo32bLE(y);\n        // store sign in first LE byte\n        b[31] |= x & 1n ? 0x80 : 0;\n        return b;\n    }\n    toHex() {\n        return bytesToHex(this.toBytes());\n    } // encode to hex string\n    clearCofactor() {\n        return this.multiply(big(h), false);\n    }\n    isSmallOrder() {\n        return this.clearCofactor().is0();\n    }\n    isTorsionFree() {\n        // multiply by big number CURVE.n\n        let p = this.multiply(N / 2n, false).double(); // ensures the point is not \"bad\".\n        if (N % 2n)\n            p = p.add(this); // P^(N+1) // P*N == (P*(N/2))*2+P\n        return p.is0();\n    }\n    static fromHex(hex, zip215) {\n        return Point.fromBytes(toU8(hex), zip215);\n    }\n    get x() {\n        return this.toAffine().x;\n    }\n    get y() {\n        return this.toAffine().y;\n    }\n    toRawBytes() {\n        return this.toBytes();\n    }\n}\n/** Generator / base point */\nconst G = new Point(Gx, Gy, 1n, M(Gx * Gy));\n/** Identity / zero point */\nconst I = new Point(0n, 1n, 1n, 0n);\n// Static aliases\nPoint.BASE = G;\nPoint.ZERO = I;\nconst numTo32bLE = (num) => hexToBytes(padh(arange(num, 0n, B256), L2)).reverse();\nconst bytesToNumLE = (b) => big('0x' + bytesToHex(u8fr(abytes(b)).reverse()));\nconst pow2 = (x, power) => {\n    // pow2(x, 4) == x^(2^4)\n    let r = x;\n    while (power-- > 0n) {\n        r *= r;\n        r %= P;\n    }\n    return r;\n};\n// prettier-ignore\nconst pow_2_252_3 = (x) => {\n    const x2 = (x * x) % P; // x^2,       bits 1\n    const b2 = (x2 * x) % P; // x^3,       bits 11\n    const b4 = (pow2(b2, 2n) * b2) % P; // x^(2^4-1), bits 1111\n    const b5 = (pow2(b4, 1n) * x) % P; // x^(2^5-1), bits 11111\n    const b10 = (pow2(b5, 5n) * b5) % P; // x^(2^10)\n    const b20 = (pow2(b10, 10n) * b10) % P; // x^(2^20)\n    const b40 = (pow2(b20, 20n) * b20) % P; // x^(2^40)\n    const b80 = (pow2(b40, 40n) * b40) % P; // x^(2^80)\n    const b160 = (pow2(b80, 80n) * b80) % P; // x^(2^160)\n    const b240 = (pow2(b160, 80n) * b80) % P; // x^(2^240)\n    const b250 = (pow2(b240, 10n) * b10) % P; // x^(2^250)\n    const pow_p_5_8 = (pow2(b250, 2n) * x) % P; // < To pow to (p+3)/8, multiply it by x.\n    return { pow_p_5_8, b2 };\n};\nconst RM1 = 0x2b8324804fc1df0b2b4d00993dfbd7a72f431806ad2fe478c4ee1b274a0ea0b0n; // √-1\n// for sqrt comp\n// prettier-ignore\nconst uvRatio = (u, v) => {\n    const v3 = M(v * v * v); // v³\n    const v7 = M(v3 * v3 * v); // v⁷\n    const pow = pow_2_252_3(u * v7).pow_p_5_8; // (uv⁷)^(p-5)/8\n    let x = M(u * v3 * pow); // (uv³)(uv⁷)^(p-5)/8\n    const vx2 = M(v * x * x); // vx²\n    const root1 = x; // First root candidate\n    const root2 = M(x * RM1); // Second root candidate; RM1 is √-1\n    const useRoot1 = vx2 === u; // If vx² = u (mod p), x is a square root\n    const useRoot2 = vx2 === M(-u); // If vx² = -u, set x <-- x * 2^((p-1)/4)\n    const noRoot = vx2 === M(-u * RM1); // There is no valid root, vx² = -u√-1\n    if (useRoot1)\n        x = root1;\n    if (useRoot2 || noRoot)\n        x = root2; // We return root2 anyway, for const-time\n    if ((M(x) & 1n) === 1n)\n        x = M(-x); // edIsNegative\n    return { isValid: useRoot1 || useRoot2, value: x };\n};\n// N == L, just weird naming\nconst modL_LE = (hash) => modN(bytesToNumLE(hash)); // modulo L; but little-endian\nconst sha512a = (...m) => etc.sha512Async(...m); // Async SHA512\nconst sha512s = (...m) => callHash('sha512Sync')(...m);\n// RFC8032 5.1.5\nconst hash2extK = (hashed) => {\n    // slice creates a copy, unlike subarray\n    const head = hashed.slice(0, L);\n    head[0] &= 248; // Clamp bits: 0b1111_1000\n    head[31] &= 127; // 0b0111_1111\n    head[31] |= 64; // 0b0100_0000\n    const prefix = hashed.slice(L, L2); // private key \"prefix\"\n    const scalar = modL_LE(head); // modular division over curve order\n    const point = G.multiply(scalar); // public key point\n    const pointBytes = point.toBytes(); // point serialized to Uint8Array\n    return { head, prefix, scalar, point, pointBytes };\n};\n// RFC8032 5.1.5; getPublicKey async, sync. Hash priv key and extract point.\nconst getExtendedPublicKeyAsync = (priv) => sha512a(toU8(priv, L)).then(hash2extK);\nconst getExtendedPublicKey = (priv) => hash2extK(sha512s(toU8(priv, L)));\n/** Creates 32-byte ed25519 public key from 32-byte private key. Async. */\nconst getPublicKeyAsync = (priv) => getExtendedPublicKeyAsync(priv).then((p) => p.pointBytes);\n/** Creates 32-byte ed25519 public key from 32-byte private key. To use, set `etc.sha512Sync` first. */\nconst getPublicKey = (priv) => getExtendedPublicKey(priv).pointBytes;\nconst hashFinishA = (res) => sha512a(res.hashable).then(res.finish);\nconst hashFinishS = (res) => res.finish(sha512s(res.hashable));\nconst _sign = (e, rBytes, msg) => {\n    // sign() shared code\n    const { pointBytes: P, scalar: s } = e;\n    const r = modL_LE(rBytes); // r was created outside, reduce it modulo L\n    const R = G.multiply(r).toBytes(); // R = [r]B\n    const hashable = concatBytes(R, P, msg); // dom2(F, C) || R || A || PH(M)\n    const finish = (hashed) => {\n        // k = SHA512(dom2(F, C) || R || A || PH(M))\n        const S = modN(r + modL_LE(hashed) * s); // S = (r + k * s) mod L; 0 <= s < l\n        return abytes(concatBytes(R, numTo32bLE(S)), L2); // 64-byte sig: 32b R.x + 32b LE(S)\n    };\n    return { hashable, finish };\n};\n/**\n * Signs message (NOT message hash) using private key. Async.\n * Follows RFC8032 5.1.6.\n */\nconst signAsync = async (msg, privKey) => {\n    const m = toU8(msg);\n    const e = await getExtendedPublicKeyAsync(privKey);\n    const rBytes = await sha512a(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinishA(_sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\n/**\n * Signs message (NOT message hash) using private key. To use, set `hashes.sha512` first.\n * Follows RFC8032 5.1.6.\n */\nconst sign = (msg, privKey) => {\n    const m = toU8(msg);\n    const e = getExtendedPublicKey(privKey);\n    const rBytes = sha512s(e.prefix, m); // r = SHA512(dom2(F, C) || prefix || PH(M))\n    return hashFinishS(_sign(e, rBytes, m)); // gen R, k, S, then 64-byte signature\n};\nconst veriOpts = { zip215: true };\nconst _verify = (sig, msg, pub, opts = veriOpts) => {\n    sig = toU8(sig, L2); // Signature hex str/Bytes, must be 64 bytes\n    msg = toU8(msg); // Message hex str/Bytes\n    pub = toU8(pub, L);\n    const { zip215 } = opts; // switch between zip215 and rfc8032 verif\n    let A;\n    let R;\n    let s;\n    let SB;\n    let hashable = Uint8Array.of();\n    try {\n        A = Point.fromHex(pub, zip215); // public key A decoded\n        R = Point.fromHex(sig.slice(0, L), zip215); // 0 <= R < 2^256: ZIP215 R can be >= P\n        s = bytesToNumLE(sig.slice(L, L2)); // Decode second half as an integer S\n        SB = G.multiply(s, false); // in the range 0 <= s < L\n        hashable = concatBytes(R.toBytes(), A.toBytes(), msg); // dom2(F, C) || R || A || PH(M)\n    }\n    catch (error) { }\n    const finish = (hashed) => {\n        // k = SHA512(dom2(F, C) || R || A || PH(M))\n        if (SB == null)\n            return false; // false if try-catch catched an error\n        if (!zip215 && A.isSmallOrder())\n            return false; // false for SBS: Strongly Binding Signature\n        const k = modL_LE(hashed); // decode in little-endian, modulo L\n        const RkA = R.add(A.multiply(k, false)); // [8]R + [8][k]A'\n        return RkA.add(SB.negate()).clearCofactor().is0(); // [8][S]B = [8]R + [8][k]A'\n    };\n    return { hashable, finish };\n};\n/** Verifies signature on message and public key. Async. Follows RFC8032 5.1.7. */\nconst verifyAsync = async (s, m, p, opts = veriOpts) => hashFinishA(_verify(s, m, p, opts));\n/** Verifies signature on message and public key. To use, set `hashes.sha512` first. Follows RFC8032 5.1.7. */\nconst verify = (s, m, p, opts = veriOpts) => hashFinishS(_verify(s, m, p, opts));\n/** Math, hex, byte helpers. Not in `utils` because utils share API with noble-curves. */\nconst etc = {\n    sha512Async: async (...messages) => {\n        const s = subtle();\n        const m = concatBytes(...messages);\n        return u8n(await s.digest('SHA-512', m.buffer));\n    },\n    sha512Sync: undefined,\n    bytesToHex: bytesToHex,\n    hexToBytes: hexToBytes,\n    concatBytes: concatBytes,\n    mod: M,\n    invert: invert,\n    randomBytes: randomBytes,\n};\n/** ed25519-specific key utilities. */\nconst utils = {\n    getExtendedPublicKeyAsync: getExtendedPublicKeyAsync,\n    getExtendedPublicKey: getExtendedPublicKey,\n    randomPrivateKey: () => randomBytes(L),\n    precompute: (w = 8, p = G) => {\n        p.multiply(3n);\n        w;\n        return p;\n    }, // no-op\n};\n// ## Precomputes\n// --------------\nconst W = 8; // W is window size\nconst scalarBits = 256;\nconst pwindows = Math.ceil(scalarBits / W) + 1; // 33 for W=8\nconst pwindowSize = 2 ** (W - 1); // 128 for W=8\nconst precompute = () => {\n    const points = [];\n    let p = G;\n    let b = p;\n    for (let w = 0; w < pwindows; w++) {\n        b = p;\n        points.push(b);\n        for (let i = 1; i < pwindowSize; i++) {\n            b = b.add(p);\n            points.push(b);\n        } // i=1, bc we skip 0\n        p = b.double();\n    }\n    return points;\n};\nlet Gpows = undefined; // precomputes for base point G\n// const-time negate\nconst ctneg = (cnd, p) => {\n    const n = p.negate();\n    return cnd ? n : p;\n};\n/**\n * Precomputes give 12x faster getPublicKey(), 10x sign(), 2x verify() by\n * caching multiples of G (base point). Cache is stored in 32MB of RAM.\n * Any time `G.multiply` is done, precomputes are used.\n * Not used for getSharedSecret, which instead multiplies random pubkey `P.multiply`.\n *\n * w-ary non-adjacent form (wNAF) precomputation method is 10% slower than windowed method,\n * but takes 2x less RAM. RAM reduction is possible by utilizing `.subtract`.\n *\n * !! Precomputes can be disabled by commenting-out call of the wNAF() inside Point#multiply().\n */\nconst wNAF = (n) => {\n    const comp = Gpows || (Gpows = precompute());\n    let p = I;\n    let f = G; // f must be G, or could become I in the end\n    const pow_2_w = 2 ** W; // 256 for W=8\n    const maxNum = pow_2_w; // 256 for W=8\n    const mask = big(pow_2_w - 1); // 255 for W=8 == mask 0b11111111\n    const shiftBy = big(W); // 8 for W=8\n    for (let w = 0; w < pwindows; w++) {\n        let wbits = Number(n & mask); // extract W bits.\n        n >>= shiftBy; // shift number by W bits.\n        if (wbits > pwindowSize) {\n            wbits -= maxNum;\n            n += 1n;\n        } // split if bits > max: +224 => 256-32\n        const off = w * pwindowSize;\n        const offF = off; // offsets, evaluate both\n        const offP = off + Math.abs(wbits) - 1;\n        const isEven = w % 2 !== 0; // conditions, evaluate both\n        const isNeg = wbits < 0;\n        if (wbits === 0) {\n            // off == I: can't add it. Adding random offF instead.\n            f = f.add(ctneg(isEven, comp[offF])); // bits are 0: add garbage to fake point\n        }\n        else {\n            p = p.add(ctneg(isNeg, comp[offP])); // bits are 1: add to result point\n        }\n    }\n    return { p, f }; // return both real and fake points for JIT\n};\n// !! Remove the export to easily use in REPL / browser console\nexport { ed25519_CURVE as CURVE, etc, Point as ExtendedPoint, getPublicKey, getPublicKeyAsync, Point, sign, signAsync, utils, verify, verifyAsync, };\n","/**\n * Utilities for hex, bytes, CSPRNG.\n * @module\n */\n/*! noble-hashes - MIT License (c) 2022 Paul Miller (paulmillr.com) */\n// We use WebCrypto aka globalThis.crypto, which exists in browsers and node.js 16+.\n// node.js versions earlier than v19 don't declare it in global scope.\n// For node.js, package.json#exports field mapping rewrites import\n// from `crypto` to `cryptoNode`, which imports native module.\n// Makes the utils un-importable in browsers without a bundler.\n// Once node.js 18 is deprecated (2025-04-30), we can just drop the import.\nimport { crypto } from '@noble/hashes/crypto';\n/** Checks if something is Uint8Array. Be careful: nodejs Buffer will return true. */\nexport function isBytes(a) {\n    return a instanceof Uint8Array || (ArrayBuffer.isView(a) && a.constructor.name === 'Uint8Array');\n}\n/** Asserts something is positive integer. */\nexport function anumber(n) {\n    if (!Number.isSafeInteger(n) || n < 0)\n        throw new Error('positive integer expected, got ' + n);\n}\n/** Asserts something is Uint8Array. */\nexport function abytes(b, ...lengths) {\n    if (!isBytes(b))\n        throw new Error('Uint8Array expected');\n    if (lengths.length > 0 && !lengths.includes(b.length))\n        throw new Error('Uint8Array expected of length ' + lengths + ', got length=' + b.length);\n}\n/** Asserts something is hash */\nexport function ahash(h) {\n    if (typeof h !== 'function' || typeof h.create !== 'function')\n        throw new Error('Hash should be wrapped by utils.createHasher');\n    anumber(h.outputLen);\n    anumber(h.blockLen);\n}\n/** Asserts a hash instance has not been destroyed / finished */\nexport function aexists(instance, checkFinished = true) {\n    if (instance.destroyed)\n        throw new Error('Hash instance has been destroyed');\n    if (checkFinished && instance.finished)\n        throw new Error('Hash#digest() has already been called');\n}\n/** Asserts output is properly-sized byte array */\nexport function aoutput(out, instance) {\n    abytes(out);\n    const min = instance.outputLen;\n    if (out.length < min) {\n        throw new Error('digestInto() expects output buffer of length at least ' + min);\n    }\n}\n/** Cast u8 / u16 / u32 to u8. */\nexport function u8(arr) {\n    return new Uint8Array(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** Cast u8 / u16 / u32 to u32. */\nexport function u32(arr) {\n    return new Uint32Array(arr.buffer, arr.byteOffset, Math.floor(arr.byteLength / 4));\n}\n/** Zeroize a byte array. Warning: JS provides no guarantees. */\nexport function clean(...arrays) {\n    for (let i = 0; i < arrays.length; i++) {\n        arrays[i].fill(0);\n    }\n}\n/** Create DataView of an array for easy byte-level manipulation. */\nexport function createView(arr) {\n    return new DataView(arr.buffer, arr.byteOffset, arr.byteLength);\n}\n/** The rotate right (circular right shift) operation for uint32 */\nexport function rotr(word, shift) {\n    return (word << (32 - shift)) | (word >>> shift);\n}\n/** The rotate left (circular left shift) operation for uint32 */\nexport function rotl(word, shift) {\n    return (word << shift) | ((word >>> (32 - shift)) >>> 0);\n}\n/** Is current platform little-endian? Most are. Big-Endian platform: IBM */\nexport const isLE = /* @__PURE__ */ (() => new Uint8Array(new Uint32Array([0x11223344]).buffer)[0] === 0x44)();\n/** The byte swap operation for uint32 */\nexport function byteSwap(word) {\n    return (((word << 24) & 0xff000000) |\n        ((word << 8) & 0xff0000) |\n        ((word >>> 8) & 0xff00) |\n        ((word >>> 24) & 0xff));\n}\n/** Conditionally byte swap if on a big-endian platform */\nexport const swap8IfBE = isLE\n    ? (n) => n\n    : (n) => byteSwap(n);\n/** @deprecated */\nexport const byteSwapIfBE = swap8IfBE;\n/** In place byte swap for Uint32Array */\nexport function byteSwap32(arr) {\n    for (let i = 0; i < arr.length; i++) {\n        arr[i] = byteSwap(arr[i]);\n    }\n    return arr;\n}\nexport const swap32IfBE = isLE\n    ? (u) => u\n    : byteSwap32;\n// Built-in hex conversion https://caniuse.com/mdn-javascript_builtins_uint8array_fromhex\nconst hasHexBuiltin = /* @__PURE__ */ (() => \n// @ts-ignore\ntypeof Uint8Array.from([]).toHex === 'function' && typeof Uint8Array.fromHex === 'function')();\n// Array where index 0xf0 (240) is mapped to string 'f0'\nconst hexes = /* @__PURE__ */ Array.from({ length: 256 }, (_, i) => i.toString(16).padStart(2, '0'));\n/**\n * Convert byte array to hex string. Uses built-in function, when available.\n * @example bytesToHex(Uint8Array.from([0xca, 0xfe, 0x01, 0x23])) // 'cafe0123'\n */\nexport function bytesToHex(bytes) {\n    abytes(bytes);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return bytes.toHex();\n    // pre-caching improves the speed 6x\n    let hex = '';\n    for (let i = 0; i < bytes.length; i++) {\n        hex += hexes[bytes[i]];\n    }\n    return hex;\n}\n// We use optimized technique to convert hex string to byte array\nconst asciis = { _0: 48, _9: 57, A: 65, F: 70, a: 97, f: 102 };\nfunction asciiToBase16(ch) {\n    if (ch >= asciis._0 && ch <= asciis._9)\n        return ch - asciis._0; // '2' => 50-48\n    if (ch >= asciis.A && ch <= asciis.F)\n        return ch - (asciis.A - 10); // 'B' => 66-(65-10)\n    if (ch >= asciis.a && ch <= asciis.f)\n        return ch - (asciis.a - 10); // 'b' => 98-(97-10)\n    return;\n}\n/**\n * Convert hex string to byte array. Uses built-in function, when available.\n * @example hexToBytes('cafe0123') // Uint8Array.from([0xca, 0xfe, 0x01, 0x23])\n */\nexport function hexToBytes(hex) {\n    if (typeof hex !== 'string')\n        throw new Error('hex string expected, got ' + typeof hex);\n    // @ts-ignore\n    if (hasHexBuiltin)\n        return Uint8Array.fromHex(hex);\n    const hl = hex.length;\n    const al = hl / 2;\n    if (hl % 2)\n        throw new Error('hex string expected, got unpadded hex of length ' + hl);\n    const array = new Uint8Array(al);\n    for (let ai = 0, hi = 0; ai < al; ai++, hi += 2) {\n        const n1 = asciiToBase16(hex.charCodeAt(hi));\n        const n2 = asciiToBase16(hex.charCodeAt(hi + 1));\n        if (n1 === undefined || n2 === undefined) {\n            const char = hex[hi] + hex[hi + 1];\n            throw new Error('hex string expected, got non-hex character \"' + char + '\" at index ' + hi);\n        }\n        array[ai] = n1 * 16 + n2; // multiply first octet, e.g. 'a3' => 10*16+3 => 160 + 3 => 163\n    }\n    return array;\n}\n/**\n * There is no setImmediate in browser and setTimeout is slow.\n * Call of async fn will return Promise, which will be fullfiled only on\n * next scheduler queue processing step and this is exactly what we need.\n */\nexport const nextTick = async () => { };\n/** Returns control to thread each 'tick' ms to avoid blocking. */\nexport async function asyncLoop(iters, tick, cb) {\n    let ts = Date.now();\n    for (let i = 0; i < iters; i++) {\n        cb(i);\n        // Date.now() is not monotonic, so in case if clock goes backwards we return return control too\n        const diff = Date.now() - ts;\n        if (diff >= 0 && diff < tick)\n            continue;\n        await nextTick();\n        ts += diff;\n    }\n}\n/**\n * Converts string to bytes using UTF8 encoding.\n * @example utf8ToBytes('abc') // Uint8Array.from([97, 98, 99])\n */\nexport function utf8ToBytes(str) {\n    if (typeof str !== 'string')\n        throw new Error('string expected');\n    return new Uint8Array(new TextEncoder().encode(str)); // https://bugzil.la/1681809\n}\n/**\n * Converts bytes to string using UTF8 encoding.\n * @example bytesToUtf8(Uint8Array.from([97, 98, 99])) // 'abc'\n */\nexport function bytesToUtf8(bytes) {\n    return new TextDecoder().decode(bytes);\n}\n/**\n * Normalizes (non-hex) string or Uint8Array to Uint8Array.\n * Warning: when Uint8Array is passed, it would NOT get copied.\n * Keep in mind for future mutable operations.\n */\nexport function toBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/**\n * Helper for KDFs: consumes uint8array or string.\n * When string is passed, does utf8 decoding, using TextDecoder.\n */\nexport function kdfInputToBytes(data) {\n    if (typeof data === 'string')\n        data = utf8ToBytes(data);\n    abytes(data);\n    return data;\n}\n/** Copies several Uint8Arrays into one. */\nexport function concatBytes(...arrays) {\n    let sum = 0;\n    for (let i = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        abytes(a);\n        sum += a.length;\n    }\n    const res = new Uint8Array(sum);\n    for (let i = 0, pad = 0; i < arrays.length; i++) {\n        const a = arrays[i];\n        res.set(a, pad);\n        pad += a.length;\n    }\n    return res;\n}\nexport function checkOpts(defaults, opts) {\n    if (opts !== undefined && {}.toString.call(opts) !== '[object Object]')\n        throw new Error('options should be object or undefined');\n    const merged = Object.assign(defaults, opts);\n    return merged;\n}\n/** For runtime check if class implements interface */\nexport class Hash {\n}\n/** Wraps hash function, creating an interface on top of it */\nexport function createHasher(hashCons) {\n    const hashC = (msg) => hashCons().update(toBytes(msg)).digest();\n    const tmp = hashCons();\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = () => hashCons();\n    return hashC;\n}\nexport function createOptHasher(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport function createXOFer(hashCons) {\n    const hashC = (msg, opts) => hashCons(opts).update(toBytes(msg)).digest();\n    const tmp = hashCons({});\n    hashC.outputLen = tmp.outputLen;\n    hashC.blockLen = tmp.blockLen;\n    hashC.create = (opts) => hashCons(opts);\n    return hashC;\n}\nexport const wrapConstructor = createHasher;\nexport const wrapConstructorWithOpts = createOptHasher;\nexport const wrapXOFConstructorWithOpts = createXOFer;\n/** Cryptographically secure PRNG. Uses internal OS-level `crypto.getRandomValues`. */\nexport function randomBytes(bytesLength = 32) {\n    if (crypto && typeof crypto.getRandomValues === 'function') {\n        return crypto.getRandomValues(new Uint8Array(bytesLength));\n    }\n    // Legacy Node.js compatibility\n    if (crypto && typeof crypto.randomBytes === 'function') {\n        return Uint8Array.from(crypto.randomBytes(bytesLength));\n    }\n    throw new Error('crypto.getRandomValues must be defined');\n}\n//# sourceMappingURL=utils.js.map","/**\n * Internal Merkle-Damgard hash utils.\n * @module\n */\nimport { Hash, abytes, aexists, aoutput, clean, createView, toBytes } from \"./utils.js\";\n/** Polyfill for Safari 14. https://caniuse.com/mdn-javascript_builtins_dataview_setbiguint64 */\nexport function setBigUint64(view, byteOffset, value, isLE) {\n    if (typeof view.setBigUint64 === 'function')\n        return view.setBigUint64(byteOffset, value, isLE);\n    const _32n = BigInt(32);\n    const _u32_max = BigInt(0xffffffff);\n    const wh = Number((value >> _32n) & _u32_max);\n    const wl = Number(value & _u32_max);\n    const h = isLE ? 4 : 0;\n    const l = isLE ? 0 : 4;\n    view.setUint32(byteOffset + h, wh, isLE);\n    view.setUint32(byteOffset + l, wl, isLE);\n}\n/** Choice: a ? b : c */\nexport function Chi(a, b, c) {\n    return (a & b) ^ (~a & c);\n}\n/** Majority function, true if any two inputs is true. */\nexport function Maj(a, b, c) {\n    return (a & b) ^ (a & c) ^ (b & c);\n}\n/**\n * Merkle-Damgard hash construction base class.\n * Could be used to create MD5, RIPEMD, SHA1, SHA2.\n */\nexport class HashMD extends Hash {\n    constructor(blockLen, outputLen, padOffset, isLE) {\n        super();\n        this.finished = false;\n        this.length = 0;\n        this.pos = 0;\n        this.destroyed = false;\n        this.blockLen = blockLen;\n        this.outputLen = outputLen;\n        this.padOffset = padOffset;\n        this.isLE = isLE;\n        this.buffer = new Uint8Array(blockLen);\n        this.view = createView(this.buffer);\n    }\n    update(data) {\n        aexists(this);\n        data = toBytes(data);\n        abytes(data);\n        const { view, buffer, blockLen } = this;\n        const len = data.length;\n        for (let pos = 0; pos < len;) {\n            const take = Math.min(blockLen - this.pos, len - pos);\n            // Fast path: we have at least one block in input, cast it to view and process\n            if (take === blockLen) {\n                const dataView = createView(data);\n                for (; blockLen <= len - pos; pos += blockLen)\n                    this.process(dataView, pos);\n                continue;\n            }\n            buffer.set(data.subarray(pos, pos + take), this.pos);\n            this.pos += take;\n            pos += take;\n            if (this.pos === blockLen) {\n                this.process(view, 0);\n                this.pos = 0;\n            }\n        }\n        this.length += data.length;\n        this.roundClean();\n        return this;\n    }\n    digestInto(out) {\n        aexists(this);\n        aoutput(out, this);\n        this.finished = true;\n        // Padding\n        // We can avoid allocation of buffer for padding completely if it\n        // was previously not allocated here. But it won't change performance.\n        const { buffer, view, blockLen, isLE } = this;\n        let { pos } = this;\n        // append the bit '1' to the message\n        buffer[pos++] = 0b10000000;\n        clean(this.buffer.subarray(pos));\n        // we have less than padOffset left in buffer, so we cannot put length in\n        // current block, need process it and pad again\n        if (this.padOffset > blockLen - pos) {\n            this.process(view, 0);\n            pos = 0;\n        }\n        // Pad until full block byte with zeros\n        for (let i = pos; i < blockLen; i++)\n            buffer[i] = 0;\n        // Note: sha512 requires length to be 128bit integer, but length in JS will overflow before that\n        // You need to write around 2 exabytes (u64_max / 8 / (1024**6)) for this to happen.\n        // So we just write lowest 64 bits of that value.\n        setBigUint64(view, blockLen - 8, BigInt(this.length * 8), isLE);\n        this.process(view, 0);\n        const oview = createView(out);\n        const len = this.outputLen;\n        // NOTE: we do division by 4 later, which should be fused in single op with modulo by JIT\n        if (len % 4)\n            throw new Error('_sha2: outputLen should be aligned to 32bit');\n        const outLen = len / 4;\n        const state = this.get();\n        if (outLen > state.length)\n            throw new Error('_sha2: outputLen bigger than state');\n        for (let i = 0; i < outLen; i++)\n            oview.setUint32(4 * i, state[i], isLE);\n    }\n    digest() {\n        const { buffer, outputLen } = this;\n        this.digestInto(buffer);\n        const res = buffer.slice(0, outputLen);\n        this.destroy();\n        return res;\n    }\n    _cloneInto(to) {\n        to || (to = new this.constructor());\n        to.set(...this.get());\n        const { blockLen, buffer, length, finished, destroyed, pos } = this;\n        to.destroyed = destroyed;\n        to.finished = finished;\n        to.length = length;\n        to.pos = pos;\n        if (length % blockLen)\n            to.buffer.set(buffer);\n        return to;\n    }\n    clone() {\n        return this._cloneInto();\n    }\n}\n/**\n * Initial SHA-2 state: fractional parts of square roots of first 16 primes 2..53.\n * Check out `test/misc/sha2-gen-iv.js` for recomputation guide.\n */\n/** Initial SHA256 state. Bits 0..32 of frac part of sqrt of primes 2..19 */\nexport const SHA256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a, 0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19,\n]);\n/** Initial SHA224 state. Bits 32..64 of frac part of sqrt of primes 23..53 */\nexport const SHA224_IV = /* @__PURE__ */ Uint32Array.from([\n    0xc1059ed8, 0x367cd507, 0x3070dd17, 0xf70e5939, 0xffc00b31, 0x68581511, 0x64f98fa7, 0xbefa4fa4,\n]);\n/** Initial SHA384 state. Bits 0..64 of frac part of sqrt of primes 23..53 */\nexport const SHA384_IV = /* @__PURE__ */ Uint32Array.from([\n    0xcbbb9d5d, 0xc1059ed8, 0x629a292a, 0x367cd507, 0x9159015a, 0x3070dd17, 0x152fecd8, 0xf70e5939,\n    0x67332667, 0xffc00b31, 0x8eb44a87, 0x68581511, 0xdb0c2e0d, 0x64f98fa7, 0x47b5481d, 0xbefa4fa4,\n]);\n/** Initial SHA512 state. Bits 0..64 of frac part of sqrt of primes 2..19 */\nexport const SHA512_IV = /* @__PURE__ */ Uint32Array.from([\n    0x6a09e667, 0xf3bcc908, 0xbb67ae85, 0x84caa73b, 0x3c6ef372, 0xfe94f82b, 0xa54ff53a, 0x5f1d36f1,\n    0x510e527f, 0xade682d1, 0x9b05688c, 0x2b3e6c1f, 0x1f83d9ab, 0xfb41bd6b, 0x5be0cd19, 0x137e2179,\n]);\n//# sourceMappingURL=_md.js.map","/**\n * Internal helpers for u64. BigUint64Array is too slow as per 2025, so we implement it using Uint32Array.\n * @todo re-check https://issues.chromium.org/issues/42212588\n * @module\n */\nconst U32_MASK64 = /* @__PURE__ */ BigInt(2 ** 32 - 1);\nconst _32n = /* @__PURE__ */ BigInt(32);\nfunction fromBig(n, le = false) {\n    if (le)\n        return { h: Number(n & U32_MASK64), l: Number((n >> _32n) & U32_MASK64) };\n    return { h: Number((n >> _32n) & U32_MASK64) | 0, l: Number(n & U32_MASK64) | 0 };\n}\nfunction split(lst, le = false) {\n    const len = lst.length;\n    let Ah = new Uint32Array(len);\n    let Al = new Uint32Array(len);\n    for (let i = 0; i < len; i++) {\n        const { h, l } = fromBig(lst[i], le);\n        [Ah[i], Al[i]] = [h, l];\n    }\n    return [Ah, Al];\n}\nconst toBig = (h, l) => (BigInt(h >>> 0) << _32n) | BigInt(l >>> 0);\n// for Shift in [0, 32)\nconst shrSH = (h, _l, s) => h >>> s;\nconst shrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in [1, 32)\nconst rotrSH = (h, l, s) => (h >>> s) | (l << (32 - s));\nconst rotrSL = (h, l, s) => (h << (32 - s)) | (l >>> s);\n// Right rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotrBH = (h, l, s) => (h << (64 - s)) | (l >>> (s - 32));\nconst rotrBL = (h, l, s) => (h >>> (s - 32)) | (l << (64 - s));\n// Right rotate for shift===32 (just swaps l&h)\nconst rotr32H = (_h, l) => l;\nconst rotr32L = (h, _l) => h;\n// Left rotate for Shift in [1, 32)\nconst rotlSH = (h, l, s) => (h << s) | (l >>> (32 - s));\nconst rotlSL = (h, l, s) => (l << s) | (h >>> (32 - s));\n// Left rotate for Shift in (32, 64), NOTE: 32 is special case.\nconst rotlBH = (h, l, s) => (l << (s - 32)) | (h >>> (64 - s));\nconst rotlBL = (h, l, s) => (h << (s - 32)) | (l >>> (64 - s));\n// JS uses 32-bit signed integers for bitwise operations which means we cannot\n// simple take carry out of low bit sum by shift, we need to use division.\nfunction add(Ah, Al, Bh, Bl) {\n    const l = (Al >>> 0) + (Bl >>> 0);\n    return { h: (Ah + Bh + ((l / 2 ** 32) | 0)) | 0, l: l | 0 };\n}\n// Addition with more than 2 elements\nconst add3L = (Al, Bl, Cl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0);\nconst add3H = (low, Ah, Bh, Ch) => (Ah + Bh + Ch + ((low / 2 ** 32) | 0)) | 0;\nconst add4L = (Al, Bl, Cl, Dl) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0);\nconst add4H = (low, Ah, Bh, Ch, Dh) => (Ah + Bh + Ch + Dh + ((low / 2 ** 32) | 0)) | 0;\nconst add5L = (Al, Bl, Cl, Dl, El) => (Al >>> 0) + (Bl >>> 0) + (Cl >>> 0) + (Dl >>> 0) + (El >>> 0);\nconst add5H = (low, Ah, Bh, Ch, Dh, Eh) => (Ah + Bh + Ch + Dh + Eh + ((low / 2 ** 32) | 0)) | 0;\n// prettier-ignore\nexport { add, add3H, add3L, add4H, add4L, add5H, add5L, fromBig, rotlBH, rotlBL, rotlSH, rotlSL, rotr32H, rotr32L, rotrBH, rotrBL, rotrSH, rotrSL, shrSH, shrSL, split, toBig };\n// prettier-ignore\nconst u64 = {\n    fromBig, split, toBig,\n    shrSH, shrSL,\n    rotrSH, rotrSL, rotrBH, rotrBL,\n    rotr32H, rotr32L,\n    rotlSH, rotlSL, rotlBH, rotlBL,\n    add, add3L, add3H, add4L, add4H, add5H, add5L,\n};\nexport default u64;\n//# sourceMappingURL=_u64.js.map","/**\n * SHA2 hash function. A.k.a. sha256, sha384, sha512, sha512_224, sha512_256.\n * SHA256 is the fastest hash implementable in JS, even faster than Blake3.\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [FIPS 180-4](https://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.180-4.pdf).\n * @module\n */\nimport { Chi, HashMD, Maj, SHA224_IV, SHA256_IV, SHA384_IV, SHA512_IV } from \"./_md.js\";\nimport * as u64 from \"./_u64.js\";\nimport { clean, createHasher, rotr } from \"./utils.js\";\n/**\n * Round constants:\n * First 32 bits of fractional parts of the cube roots of the first 64 primes 2..311)\n */\n// prettier-ignore\nconst SHA256_K = /* @__PURE__ */ Uint32Array.from([\n    0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5, 0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,\n    0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3, 0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,\n    0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc, 0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,\n    0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7, 0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,\n    0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13, 0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,\n    0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3, 0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,\n    0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5, 0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,\n    0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208, 0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2\n]);\n/** Reusable temporary buffer. \"W\" comes straight from spec. */\nconst SHA256_W = /* @__PURE__ */ new Uint32Array(64);\nexport class SHA256 extends HashMD {\n    constructor(outputLen = 32) {\n        super(64, outputLen, 8, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        this.A = SHA256_IV[0] | 0;\n        this.B = SHA256_IV[1] | 0;\n        this.C = SHA256_IV[2] | 0;\n        this.D = SHA256_IV[3] | 0;\n        this.E = SHA256_IV[4] | 0;\n        this.F = SHA256_IV[5] | 0;\n        this.G = SHA256_IV[6] | 0;\n        this.H = SHA256_IV[7] | 0;\n    }\n    get() {\n        const { A, B, C, D, E, F, G, H } = this;\n        return [A, B, C, D, E, F, G, H];\n    }\n    // prettier-ignore\n    set(A, B, C, D, E, F, G, H) {\n        this.A = A | 0;\n        this.B = B | 0;\n        this.C = C | 0;\n        this.D = D | 0;\n        this.E = E | 0;\n        this.F = F | 0;\n        this.G = G | 0;\n        this.H = H | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 48 words w[16..63] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4)\n            SHA256_W[i] = view.getUint32(offset, false);\n        for (let i = 16; i < 64; i++) {\n            const W15 = SHA256_W[i - 15];\n            const W2 = SHA256_W[i - 2];\n            const s0 = rotr(W15, 7) ^ rotr(W15, 18) ^ (W15 >>> 3);\n            const s1 = rotr(W2, 17) ^ rotr(W2, 19) ^ (W2 >>> 10);\n            SHA256_W[i] = (s1 + SHA256_W[i - 7] + s0 + SHA256_W[i - 16]) | 0;\n        }\n        // Compression function main loop, 64 rounds\n        let { A, B, C, D, E, F, G, H } = this;\n        for (let i = 0; i < 64; i++) {\n            const sigma1 = rotr(E, 6) ^ rotr(E, 11) ^ rotr(E, 25);\n            const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const sigma0 = rotr(A, 2) ^ rotr(A, 13) ^ rotr(A, 22);\n            const T2 = (sigma0 + Maj(A, B, C)) | 0;\n            H = G;\n            G = F;\n            F = E;\n            E = (D + T1) | 0;\n            D = C;\n            C = B;\n            B = A;\n            A = (T1 + T2) | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        A = (A + this.A) | 0;\n        B = (B + this.B) | 0;\n        C = (C + this.C) | 0;\n        D = (D + this.D) | 0;\n        E = (E + this.E) | 0;\n        F = (F + this.F) | 0;\n        G = (G + this.G) | 0;\n        H = (H + this.H) | 0;\n        this.set(A, B, C, D, E, F, G, H);\n    }\n    roundClean() {\n        clean(SHA256_W);\n    }\n    destroy() {\n        this.set(0, 0, 0, 0, 0, 0, 0, 0);\n        clean(this.buffer);\n    }\n}\nexport class SHA224 extends SHA256 {\n    constructor() {\n        super(28);\n        this.A = SHA224_IV[0] | 0;\n        this.B = SHA224_IV[1] | 0;\n        this.C = SHA224_IV[2] | 0;\n        this.D = SHA224_IV[3] | 0;\n        this.E = SHA224_IV[4] | 0;\n        this.F = SHA224_IV[5] | 0;\n        this.G = SHA224_IV[6] | 0;\n        this.H = SHA224_IV[7] | 0;\n    }\n}\n// SHA2-512 is slower than sha256 in js because u64 operations are slow.\n// Round contants\n// First 32 bits of the fractional parts of the cube roots of the first 80 primes 2..409\n// prettier-ignore\nconst K512 = /* @__PURE__ */ (() => u64.split([\n    '0x428a2f98d728ae22', '0x7137449123ef65cd', '0xb5c0fbcfec4d3b2f', '0xe9b5dba58189dbbc',\n    '0x3956c25bf348b538', '0x59f111f1b605d019', '0x923f82a4af194f9b', '0xab1c5ed5da6d8118',\n    '0xd807aa98a3030242', '0x12835b0145706fbe', '0x243185be4ee4b28c', '0x550c7dc3d5ffb4e2',\n    '0x72be5d74f27b896f', '0x80deb1fe3b1696b1', '0x9bdc06a725c71235', '0xc19bf174cf692694',\n    '0xe49b69c19ef14ad2', '0xefbe4786384f25e3', '0x0fc19dc68b8cd5b5', '0x240ca1cc77ac9c65',\n    '0x2de92c6f592b0275', '0x4a7484aa6ea6e483', '0x5cb0a9dcbd41fbd4', '0x76f988da831153b5',\n    '0x983e5152ee66dfab', '0xa831c66d2db43210', '0xb00327c898fb213f', '0xbf597fc7beef0ee4',\n    '0xc6e00bf33da88fc2', '0xd5a79147930aa725', '0x06ca6351e003826f', '0x142929670a0e6e70',\n    '0x27b70a8546d22ffc', '0x2e1b21385c26c926', '0x4d2c6dfc5ac42aed', '0x53380d139d95b3df',\n    '0x650a73548baf63de', '0x766a0abb3c77b2a8', '0x81c2c92e47edaee6', '0x92722c851482353b',\n    '0xa2bfe8a14cf10364', '0xa81a664bbc423001', '0xc24b8b70d0f89791', '0xc76c51a30654be30',\n    '0xd192e819d6ef5218', '0xd69906245565a910', '0xf40e35855771202a', '0x106aa07032bbd1b8',\n    '0x19a4c116b8d2d0c8', '0x1e376c085141ab53', '0x2748774cdf8eeb99', '0x34b0bcb5e19b48a8',\n    '0x391c0cb3c5c95a63', '0x4ed8aa4ae3418acb', '0x5b9cca4f7763e373', '0x682e6ff3d6b2b8a3',\n    '0x748f82ee5defb2fc', '0x78a5636f43172f60', '0x84c87814a1f0ab72', '0x8cc702081a6439ec',\n    '0x90befffa23631e28', '0xa4506cebde82bde9', '0xbef9a3f7b2c67915', '0xc67178f2e372532b',\n    '0xca273eceea26619c', '0xd186b8c721c0c207', '0xeada7dd6cde0eb1e', '0xf57d4f7fee6ed178',\n    '0x06f067aa72176fba', '0x0a637dc5a2c898a6', '0x113f9804bef90dae', '0x1b710b35131c471b',\n    '0x28db77f523047d84', '0x32caab7b40c72493', '0x3c9ebe0a15c9bebc', '0x431d67c49c100d4c',\n    '0x4cc5d4becb3e42b6', '0x597f299cfc657e2a', '0x5fcb6fab3ad6faec', '0x6c44198c4a475817'\n].map(n => BigInt(n))))();\nconst SHA512_Kh = /* @__PURE__ */ (() => K512[0])();\nconst SHA512_Kl = /* @__PURE__ */ (() => K512[1])();\n// Reusable temporary buffers\nconst SHA512_W_H = /* @__PURE__ */ new Uint32Array(80);\nconst SHA512_W_L = /* @__PURE__ */ new Uint32Array(80);\nexport class SHA512 extends HashMD {\n    constructor(outputLen = 64) {\n        super(128, outputLen, 16, false);\n        // We cannot use array here since array allows indexing by variable\n        // which means optimizer/compiler cannot use registers.\n        // h -- high 32 bits, l -- low 32 bits\n        this.Ah = SHA512_IV[0] | 0;\n        this.Al = SHA512_IV[1] | 0;\n        this.Bh = SHA512_IV[2] | 0;\n        this.Bl = SHA512_IV[3] | 0;\n        this.Ch = SHA512_IV[4] | 0;\n        this.Cl = SHA512_IV[5] | 0;\n        this.Dh = SHA512_IV[6] | 0;\n        this.Dl = SHA512_IV[7] | 0;\n        this.Eh = SHA512_IV[8] | 0;\n        this.El = SHA512_IV[9] | 0;\n        this.Fh = SHA512_IV[10] | 0;\n        this.Fl = SHA512_IV[11] | 0;\n        this.Gh = SHA512_IV[12] | 0;\n        this.Gl = SHA512_IV[13] | 0;\n        this.Hh = SHA512_IV[14] | 0;\n        this.Hl = SHA512_IV[15] | 0;\n    }\n    // prettier-ignore\n    get() {\n        const { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        return [Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl];\n    }\n    // prettier-ignore\n    set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl) {\n        this.Ah = Ah | 0;\n        this.Al = Al | 0;\n        this.Bh = Bh | 0;\n        this.Bl = Bl | 0;\n        this.Ch = Ch | 0;\n        this.Cl = Cl | 0;\n        this.Dh = Dh | 0;\n        this.Dl = Dl | 0;\n        this.Eh = Eh | 0;\n        this.El = El | 0;\n        this.Fh = Fh | 0;\n        this.Fl = Fl | 0;\n        this.Gh = Gh | 0;\n        this.Gl = Gl | 0;\n        this.Hh = Hh | 0;\n        this.Hl = Hl | 0;\n    }\n    process(view, offset) {\n        // Extend the first 16 words into the remaining 64 words w[16..79] of the message schedule array\n        for (let i = 0; i < 16; i++, offset += 4) {\n            SHA512_W_H[i] = view.getUint32(offset);\n            SHA512_W_L[i] = view.getUint32((offset += 4));\n        }\n        for (let i = 16; i < 80; i++) {\n            // s0 := (w[i-15] rightrotate 1) xor (w[i-15] rightrotate 8) xor (w[i-15] rightshift 7)\n            const W15h = SHA512_W_H[i - 15] | 0;\n            const W15l = SHA512_W_L[i - 15] | 0;\n            const s0h = u64.rotrSH(W15h, W15l, 1) ^ u64.rotrSH(W15h, W15l, 8) ^ u64.shrSH(W15h, W15l, 7);\n            const s0l = u64.rotrSL(W15h, W15l, 1) ^ u64.rotrSL(W15h, W15l, 8) ^ u64.shrSL(W15h, W15l, 7);\n            // s1 := (w[i-2] rightrotate 19) xor (w[i-2] rightrotate 61) xor (w[i-2] rightshift 6)\n            const W2h = SHA512_W_H[i - 2] | 0;\n            const W2l = SHA512_W_L[i - 2] | 0;\n            const s1h = u64.rotrSH(W2h, W2l, 19) ^ u64.rotrBH(W2h, W2l, 61) ^ u64.shrSH(W2h, W2l, 6);\n            const s1l = u64.rotrSL(W2h, W2l, 19) ^ u64.rotrBL(W2h, W2l, 61) ^ u64.shrSL(W2h, W2l, 6);\n            // SHA256_W[i] = s0 + s1 + SHA256_W[i - 7] + SHA256_W[i - 16];\n            const SUMl = u64.add4L(s0l, s1l, SHA512_W_L[i - 7], SHA512_W_L[i - 16]);\n            const SUMh = u64.add4H(SUMl, s0h, s1h, SHA512_W_H[i - 7], SHA512_W_H[i - 16]);\n            SHA512_W_H[i] = SUMh | 0;\n            SHA512_W_L[i] = SUMl | 0;\n        }\n        let { Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl } = this;\n        // Compression function main loop, 80 rounds\n        for (let i = 0; i < 80; i++) {\n            // S1 := (e rightrotate 14) xor (e rightrotate 18) xor (e rightrotate 41)\n            const sigma1h = u64.rotrSH(Eh, El, 14) ^ u64.rotrSH(Eh, El, 18) ^ u64.rotrBH(Eh, El, 41);\n            const sigma1l = u64.rotrSL(Eh, El, 14) ^ u64.rotrSL(Eh, El, 18) ^ u64.rotrBL(Eh, El, 41);\n            //const T1 = (H + sigma1 + Chi(E, F, G) + SHA256_K[i] + SHA256_W[i]) | 0;\n            const CHIh = (Eh & Fh) ^ (~Eh & Gh);\n            const CHIl = (El & Fl) ^ (~El & Gl);\n            // T1 = H + sigma1 + Chi(E, F, G) + SHA512_K[i] + SHA512_W[i]\n            // prettier-ignore\n            const T1ll = u64.add5L(Hl, sigma1l, CHIl, SHA512_Kl[i], SHA512_W_L[i]);\n            const T1h = u64.add5H(T1ll, Hh, sigma1h, CHIh, SHA512_Kh[i], SHA512_W_H[i]);\n            const T1l = T1ll | 0;\n            // S0 := (a rightrotate 28) xor (a rightrotate 34) xor (a rightrotate 39)\n            const sigma0h = u64.rotrSH(Ah, Al, 28) ^ u64.rotrBH(Ah, Al, 34) ^ u64.rotrBH(Ah, Al, 39);\n            const sigma0l = u64.rotrSL(Ah, Al, 28) ^ u64.rotrBL(Ah, Al, 34) ^ u64.rotrBL(Ah, Al, 39);\n            const MAJh = (Ah & Bh) ^ (Ah & Ch) ^ (Bh & Ch);\n            const MAJl = (Al & Bl) ^ (Al & Cl) ^ (Bl & Cl);\n            Hh = Gh | 0;\n            Hl = Gl | 0;\n            Gh = Fh | 0;\n            Gl = Fl | 0;\n            Fh = Eh | 0;\n            Fl = El | 0;\n            ({ h: Eh, l: El } = u64.add(Dh | 0, Dl | 0, T1h | 0, T1l | 0));\n            Dh = Ch | 0;\n            Dl = Cl | 0;\n            Ch = Bh | 0;\n            Cl = Bl | 0;\n            Bh = Ah | 0;\n            Bl = Al | 0;\n            const All = u64.add3L(T1l, sigma0l, MAJl);\n            Ah = u64.add3H(All, T1h, sigma0h, MAJh);\n            Al = All | 0;\n        }\n        // Add the compressed chunk to the current hash value\n        ({ h: Ah, l: Al } = u64.add(this.Ah | 0, this.Al | 0, Ah | 0, Al | 0));\n        ({ h: Bh, l: Bl } = u64.add(this.Bh | 0, this.Bl | 0, Bh | 0, Bl | 0));\n        ({ h: Ch, l: Cl } = u64.add(this.Ch | 0, this.Cl | 0, Ch | 0, Cl | 0));\n        ({ h: Dh, l: Dl } = u64.add(this.Dh | 0, this.Dl | 0, Dh | 0, Dl | 0));\n        ({ h: Eh, l: El } = u64.add(this.Eh | 0, this.El | 0, Eh | 0, El | 0));\n        ({ h: Fh, l: Fl } = u64.add(this.Fh | 0, this.Fl | 0, Fh | 0, Fl | 0));\n        ({ h: Gh, l: Gl } = u64.add(this.Gh | 0, this.Gl | 0, Gh | 0, Gl | 0));\n        ({ h: Hh, l: Hl } = u64.add(this.Hh | 0, this.Hl | 0, Hh | 0, Hl | 0));\n        this.set(Ah, Al, Bh, Bl, Ch, Cl, Dh, Dl, Eh, El, Fh, Fl, Gh, Gl, Hh, Hl);\n    }\n    roundClean() {\n        clean(SHA512_W_H, SHA512_W_L);\n    }\n    destroy() {\n        clean(this.buffer);\n        this.set(0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);\n    }\n}\nexport class SHA384 extends SHA512 {\n    constructor() {\n        super(48);\n        this.Ah = SHA384_IV[0] | 0;\n        this.Al = SHA384_IV[1] | 0;\n        this.Bh = SHA384_IV[2] | 0;\n        this.Bl = SHA384_IV[3] | 0;\n        this.Ch = SHA384_IV[4] | 0;\n        this.Cl = SHA384_IV[5] | 0;\n        this.Dh = SHA384_IV[6] | 0;\n        this.Dl = SHA384_IV[7] | 0;\n        this.Eh = SHA384_IV[8] | 0;\n        this.El = SHA384_IV[9] | 0;\n        this.Fh = SHA384_IV[10] | 0;\n        this.Fl = SHA384_IV[11] | 0;\n        this.Gh = SHA384_IV[12] | 0;\n        this.Gl = SHA384_IV[13] | 0;\n        this.Hh = SHA384_IV[14] | 0;\n        this.Hl = SHA384_IV[15] | 0;\n    }\n}\n/**\n * Truncated SHA512/256 and SHA512/224.\n * SHA512_IV is XORed with 0xa5a5a5a5a5a5a5a5, then used as \"intermediary\" IV of SHA512/t.\n * Then t hashes string to produce result IV.\n * See `test/misc/sha2-gen-iv.js`.\n */\n/** SHA512/224 IV */\nconst T224_IV = /* @__PURE__ */ Uint32Array.from([\n    0x8c3d37c8, 0x19544da2, 0x73e19966, 0x89dcd4d6, 0x1dfab7ae, 0x32ff9c82, 0x679dd514, 0x582f9fcf,\n    0x0f6d2b69, 0x7bd44da8, 0x77e36f73, 0x04c48942, 0x3f9d85a8, 0x6a1d36c8, 0x1112e6ad, 0x91d692a1,\n]);\n/** SHA512/256 IV */\nconst T256_IV = /* @__PURE__ */ Uint32Array.from([\n    0x22312194, 0xfc2bf72c, 0x9f555fa3, 0xc84c64c2, 0x2393b86b, 0x6f53b151, 0x96387719, 0x5940eabd,\n    0x96283ee2, 0xa88effe3, 0xbe5e1e25, 0x53863992, 0x2b0199fc, 0x2c85b8aa, 0x0eb72ddc, 0x81c52ca2,\n]);\nexport class SHA512_224 extends SHA512 {\n    constructor() {\n        super(28);\n        this.Ah = T224_IV[0] | 0;\n        this.Al = T224_IV[1] | 0;\n        this.Bh = T224_IV[2] | 0;\n        this.Bl = T224_IV[3] | 0;\n        this.Ch = T224_IV[4] | 0;\n        this.Cl = T224_IV[5] | 0;\n        this.Dh = T224_IV[6] | 0;\n        this.Dl = T224_IV[7] | 0;\n        this.Eh = T224_IV[8] | 0;\n        this.El = T224_IV[9] | 0;\n        this.Fh = T224_IV[10] | 0;\n        this.Fl = T224_IV[11] | 0;\n        this.Gh = T224_IV[12] | 0;\n        this.Gl = T224_IV[13] | 0;\n        this.Hh = T224_IV[14] | 0;\n        this.Hl = T224_IV[15] | 0;\n    }\n}\nexport class SHA512_256 extends SHA512 {\n    constructor() {\n        super(32);\n        this.Ah = T256_IV[0] | 0;\n        this.Al = T256_IV[1] | 0;\n        this.Bh = T256_IV[2] | 0;\n        this.Bl = T256_IV[3] | 0;\n        this.Ch = T256_IV[4] | 0;\n        this.Cl = T256_IV[5] | 0;\n        this.Dh = T256_IV[6] | 0;\n        this.Dl = T256_IV[7] | 0;\n        this.Eh = T256_IV[8] | 0;\n        this.El = T256_IV[9] | 0;\n        this.Fh = T256_IV[10] | 0;\n        this.Fl = T256_IV[11] | 0;\n        this.Gh = T256_IV[12] | 0;\n        this.Gl = T256_IV[13] | 0;\n        this.Hh = T256_IV[14] | 0;\n        this.Hl = T256_IV[15] | 0;\n    }\n}\n/**\n * SHA2-256 hash function from RFC 4634.\n *\n * It is the fastest JS hash, even faster than Blake3.\n * To break sha256 using birthday attack, attackers need to try 2^128 hashes.\n * BTC network is doing 2^70 hashes/sec (2^95 hashes/year) as per 2025.\n */\nexport const sha256 = /* @__PURE__ */ createHasher(() => new SHA256());\n/** SHA2-224 hash function from RFC 4634 */\nexport const sha224 = /* @__PURE__ */ createHasher(() => new SHA224());\n/** SHA2-512 hash function from RFC 4634. */\nexport const sha512 = /* @__PURE__ */ createHasher(() => new SHA512());\n/** SHA2-384 hash function from RFC 4634. */\nexport const sha384 = /* @__PURE__ */ createHasher(() => new SHA384());\n/**\n * SHA2-512/256 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_256 = /* @__PURE__ */ createHasher(() => new SHA512_256());\n/**\n * SHA2-512/224 \"truncated\" hash function, with improved resistance to length extension attacks.\n * See the paper on [truncated SHA512](https://eprint.iacr.org/2010/548.pdf).\n */\nexport const sha512_224 = /* @__PURE__ */ createHasher(() => new SHA512_224());\n//# sourceMappingURL=sha2.js.map","/**\n * SHA2-512 a.k.a. sha512 and sha384. It is slower than sha256 in js because u64 operations are slow.\n *\n * Check out [RFC 4634](https://datatracker.ietf.org/doc/html/rfc4634) and\n * [the paper on truncated SHA512/256](https://eprint.iacr.org/2010/548.pdf).\n * @module\n * @deprecated\n */\nimport { SHA384 as SHA384n, sha384 as sha384n, sha512_224 as sha512_224n, SHA512_224 as SHA512_224n, sha512_256 as sha512_256n, SHA512_256 as SHA512_256n, SHA512 as SHA512n, sha512 as sha512n, } from \"./sha2.js\";\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512 = SHA512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512 = sha512n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA384 = SHA384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha384 = sha384n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_224 = SHA512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_224 = sha512_224n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const SHA512_256 = SHA512_256n;\n/** @deprecated Use import from `noble/hashes/sha2` module */\nexport const sha512_256 = sha512_256n;\n//# sourceMappingURL=sha512.js.map"],"names":["HpkeError","Error","constructor","e","message","super","this","name","ValidationError","EncapError","DecapError","ExportError","SealError","OpenError","MessageLimitReachedError","DeriveKeyPairError","dntGlobalThis","baseObj","globalThis","extObj","Proxy","get","_target","prop","_receiver","set","value","deleteProperty","success","ownKeys","baseKeys","Reflect","extKeys","extKeysSet","Set","filter","k","has","defineProperty","desc","getOwnPropertyDescriptor","NativeAlgorithm","Object","enumerable","configurable","writable","undefined","_setup","_api","async","crypto","subtle","webcrypto","loadSubtleCrypto","NotAssigned","DhkemP256HkdfSha256","DhkemP384HkdfSha384","DhkemP521HkdfSha512","DhkemSecp256k1HkdfSha256","DhkemX25519HkdfSha256","DhkemX448HkdfSha512","HybridkemX25519Kyber768","MlKem512","MlKem768","MlKem1024","XWing","KdfId","HkdfSha256","HkdfSha384","HkdfSha512","AeadId","Aes128Gcm","Aes256Gcm","Chacha20Poly1305","ExportOnly","INPUT_LENGTH_LIMIT","Uint8Array","x","privateKey","publicKey","n","w","ret","i","a","b","length","base64UrlToBytes","v","base64","replace","byteString","atob","charCodeAt","LABEL_EAE_PRK","LABEL_SHARED_SECRET","Dhkem","id","prim","kdf","_prim","_kdf","suiteId","init","serializePublicKey","key","deserializePublicKey","serializePrivateKey","deserializePrivateKey","importKey","format","isPublic","generateKeyPair","deriveKeyPair","ikm","byteLength","encap","params","ke","ekm","enc","pkrm","recipientPublicKey","dh","kemContext","senderKey","sks","pks","derivePublicKey","pksm","c","concat3","sharedSecret","_generateSharedSecret","decap","pke","skr","recipientKey","pkr","senderPublicKey","labeledIkm","buildLabeledIkm","labeledInfo","buildLabeledInfo","secretSize","extractAndExpand","buffer","KEM_USAGES","Bignum","size","_num","val","reset","fill","src","isZero","lessThan","LABEL_CANDIDATE","ORDER_P_256","ORDER_P_384","ORDER_P_521","PKCS8_ALG_ID_P_256","PKCS8_ALG_ID_P_384","PKCS8_ALG_ID_P_521","Ec","kem","hkdf","_hkdf","_alg","namedCurve","_nPk","_nSk","_nDh","_order","_bitmask","_pkcs8AlgId","exportKey","_importRawKey","jwk","ArrayBuffer","_importJWK","generateKey","dkpPrk","labeledExtract","bn","counter","bytes","labeledExpand","sk","_deserializePkcs8Key","pk","deriveBits","public","crv","d","pkcs8Key","HPKE_VERSION","HkdfNative","hash","_suiteId","label","_checkInit","info","len","extract","salt","hashSize","algHash","sign","expand","prk","okm","p","prev","mid","tail","tmp","cur","slice","baseKey","HkdfSha256Native","arguments","HkdfSha384Native","HkdfSha512Native","AEAD_USAGES","BigInt","AesGcmContext","_rawKey","seal","iv","data","aad","_setupKey","alg","additionalData","encrypt","_key","open","decrypt","_importKey","createEncryptionContext","emitNotSupported","Promise","_resolve","reject","LABEL_SEC","ExporterContextImpl","api","exporterSecret","_data","_aad","exporterContext","RecipientExporterContextImpl","SenderExporterContextImpl","EncryptionContextImpl","baseNonce","seq","_aead","aead","_nK","keySize","_nN","nonceSize","_nT","tagSize","_ctx","computeNonce","seqBytes","buf","xor","incrementSeq","Number","MAX_SAFE_INTEGER","RecipientContextImpl","pt","SenderContextImpl","ct","LABEL_BASE_NONCE","LABEL_EXP","LABEL_INFO_HASH","LABEL_KEY","LABEL_PSK_ID_HASH","LABEL_SECRET","SUITE_ID_HEADER_HPKE","CipherSuiteNative","_kem","createSenderContext","_validateInputLength","mode","psk","_keyScheduleS","createRecipientContext","_keyScheduleR","ctx","_keySchedule","pskId","pskIdHash","infoHash","keyScheduleContext","exporterSecretInfo","keyInfo","baseNonceInfo","res","DhkemP256HkdfSha256Native","DhkemP384HkdfSha384Native","DhkemP521HkdfSha512Native","CipherSuite","ALG_NAME","PKCS8_ALG_ID_X25519","X25519","rawSk","rawSkBytes","kty","PKCS8_ALG_ID_X448","X448","P","Gx","Gy","_a","_d","h","err","m","isStr","s","abytes","l","isView","isBytes","u8n","u8fr","from","padh","pad","toString","padStart","bytesToHex","Array","map","join","_ch","ch","hexToBytes","hex","hl","al","array","ai","hi","n1","n2","toU8","cr","concatBytes","arrs","r","reduce","sum","forEach","big","arange","min","max","msg","isBig","M","invert","num","md","y","u","q","apoint","Point","B256","static","ex","ey","ez","et","freeze","fromAffine","fromBytes","zip215","normed","lastByte","bytesToNumLE","y2","isValid","uvRatio","isXOdd","isLastByteOdd","assertValidity","is0","X","Y","Z","T","X2","Y2","Z2","Z4","aX2","equals","other","X1","Y1","Z1","X1Z2","X2Z1","Y1Z2","Y2Z1","I","negate","double","A","B","C","D","x1y1","E","G","F","H","X3","Y3","T3","Z3","add","T1","T2","multiply","safe","N","wNAF","f","toAffine","z","iz","toBytes","numTo32bLE","toHex","clearCofactor","isSmallOrder","isTorsionFree","fromHex","toRawBytes","BASE","ZERO","reverse","pow2","power","RM1","v3","pow","b2","b4","b5","b10","b20","b40","b80","b160","b240","b250","pow_p_5_8","pow_2_252_3","vx2","root1","root2","useRoot1","useRoot2","noRoot","modL_LE","modN","getExtendedPublicKey","priv","hashed","head","prefix","scalar","point","pointBytes","hash2extK","fn","etc","callHash","sha512s","getPublicKey","sha512Async","messages","digest","sha512Sync","mod","randomBytes","getRandomValues","pwindows","Math","ceil","scalarBits","Gpows","ctneg","cnd","comp","points","push","precompute","mask","pow_2_w","shiftBy","wbits","off","offF","offP","abs","isEven","isNeg","lengths","includes","aexists","instance","checkFinished","destroyed","finished","clean","arrays","createView","arr","DataView","byteOffset","str","TextEncoder","encode","utf8ToBytes","Hash","hashCons","hashC","update","outputLen","blockLen","create","HashMD","padOffset","isLE","pos","view","take","dataView","process","subarray","roundClean","digestInto","out","aoutput","setBigUint64","_32n","_u32_max","wh","wl","setUint32","oview","outLen","state","destroy","_cloneInto","to","clone","SHA512_IV","Uint32Array","U32_MASK64","fromBig","le","shrSH","_l","shrSL","rotrSH","rotrSL","rotrBH","rotrBL","Ah","Al","Bh","Bl","add3L","Cl","add3H","low","Ch","add4L","Dl","add4H","Dh","add5L","El","add5H","Eh","K512","lst","SHA512_Kh","SHA512_Kl","SHA512_W_H","SHA512_W_L","SHA512","Fh","Fl","Gh","Gl","Hh","Hl","offset","getUint32","W15h","W15l","s0h","s0l","W2h","W2l","s1h","s1l","SUMl","SUMh","sigma1h","sigma1l","CHIh","T1ll","T1h","T1l","sigma0h","sigma0l","MAJh","MAJl","All"],"sourceRoot":""}